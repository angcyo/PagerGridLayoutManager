Index: app/src/main/java/com/shencoder/demo/activity/ViewPager2Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.demo.activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.android.material.tabs.TabLayoutMediator;\r\nimport com.shencoder.demo.bean.MenuBean;\r\nimport com.shencoder.demo.R;\r\nimport com.shencoder.demo.adapter.ViewPager2FragmentAdapter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author ShenBen\r\n */\r\npublic class ViewPager2Activity extends AppCompatActivity {\r\n    public static final String TAG = \"MainActivity\";\r\n    private ViewPager2 vp;\r\n    private TabLayout tabLayout;\r\n    private TabLayoutMediator mediator;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_view_pager2);\r\n        tabLayout = findViewById(R.id.tabLayout);\r\n        vp = findViewById(R.id.vp);\r\n        ViewPager2FragmentAdapter adapter = new ViewPager2FragmentAdapter(this);\r\n        vp.setAdapter(adapter);\r\n\r\n//        vp.setUserInputEnabled(false);\r\n\r\n        mediator = new TabLayoutMediator(tabLayout, vp, (tab, position) -> tab.setText(adapter.getItem(position).getTitle()));\r\n        mediator.attach();\r\n\r\n        List<MenuBean> list = new ArrayList<>();\r\n        for (int i = 0; i < 3; i++) {\r\n            list.add(new MenuBean(\"Menu\" + (i + 1), i != 0));\r\n        }\r\n        adapter.setNewData(list);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        mediator.detach();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/shencoder/demo/activity/ViewPager2Activity.java b/app/src/main/java/com/shencoder/demo/activity/ViewPager2Activity.java
--- a/app/src/main/java/com/shencoder/demo/activity/ViewPager2Activity.java	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/app/src/main/java/com/shencoder/demo/activity/ViewPager2Activity.java	(date 1632965274898)
@@ -32,7 +32,7 @@
         ViewPager2FragmentAdapter adapter = new ViewPager2FragmentAdapter(this);
         vp.setAdapter(adapter);
 
-//        vp.setUserInputEnabled(false);
+        vp.setUserInputEnabled(false);
 
         mediator = new TabLayoutMediator(tabLayout, vp, (tab, position) -> tab.setText(adapter.getItem(position).getTitle()));
         mediator.attach();
Index: pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridLayoutManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.pagergridlayoutmanager;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.PointF;\r\nimport android.graphics.Rect;\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\nimport android.util.AttributeSet;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.ViewParent;\r\n\r\nimport androidx.annotation.CallSuper;\r\nimport androidx.annotation.IntDef;\r\nimport androidx.annotation.IntRange;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RestrictTo;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\n\r\nimport static androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX;\r\n\r\n/**\r\n * 分页滑动网格布局LayoutManager\r\n *\r\n * @author ShenBen\r\n * @date 2021/01/10 17:01\r\n * @email 714081644@qq.com\r\n */\r\npublic class PagerGridLayoutManager extends RecyclerView.LayoutManager implements RecyclerView.SmoothScroller.ScrollVectorProvider {\r\n    private static final String TAG = \"PagerGridLayoutManager\";\r\n    /**\r\n     * 是否启用Debug\r\n     */\r\n    public static final boolean DEBUG = false;\r\n    /**\r\n     * 水平滑动\r\n     */\r\n    public static final int HORIZONTAL = RecyclerView.HORIZONTAL;\r\n    /**\r\n     * 垂直滑动\r\n     */\r\n    public static final int VERTICAL = RecyclerView.VERTICAL;\r\n    /**\r\n     * @see #mCurrentPagerIndex\r\n     */\r\n    public static final int NO_ITEM = -1;\r\n\r\n    @RestrictTo(LIBRARY_GROUP_PREFIX)\r\n    @IntDef({HORIZONTAL, VERTICAL})\r\n    @Retention(RetentionPolicy.SOURCE)\r\n    public @interface Orientation {\r\n    }\r\n\r\n    private PagerGridSnapHelper mPagerGridSnapHelper;\r\n    /**\r\n     * 当前滑动方向\r\n     */\r\n    @Orientation\r\n    private int mOrientation = HORIZONTAL;\r\n    /**\r\n     * 行数\r\n     */\r\n    @IntRange(from = 1)\r\n    private int mRows;\r\n    /**\r\n     * 列数\r\n     */\r\n    @IntRange(from = 1)\r\n    private int mColumns;\r\n    /**\r\n     * 一页的数量 {@link #mRows} * {@link #mColumns}\r\n     */\r\n    private int mOnePageSize;\r\n    /**\r\n     * 总页数\r\n     */\r\n    private int mPagerCount = NO_ITEM;\r\n    /**\r\n     * 当前页码下标\r\n     * 从0开始\r\n     */\r\n    private int mCurrentPagerIndex = NO_ITEM;\r\n    /**\r\n     * item的宽度\r\n     */\r\n    private int mItemWidth;\r\n    /**\r\n     * item的高度\r\n     */\r\n    private int mItemHeight;\r\n    /**\r\n     * 一个ItemView的所有ItemDecoration占用的宽度(px)\r\n     */\r\n    private int mItemWidthUsed;\r\n    /**\r\n     * 一个ItemView的所有ItemDecoration占用的高度(px)\r\n     */\r\n    private int mItemHeightUsed;\r\n\r\n    /**\r\n     * 用于保存一些状态\r\n     */\r\n    private final LayoutState mLayoutState = new LayoutState();\r\n\r\n    private final LayoutChunkResult mLayoutChunkResult = new LayoutChunkResult();\r\n    /**\r\n     * 用于计算锚点坐标-左上角第一个view的位置\r\n     */\r\n    private final Rect mStartSnapRect = new Rect();\r\n    /**\r\n     * 用于计算锚点坐标-右下角最后一个view的位置\r\n     */\r\n    private final Rect mEndSnapRect = new Rect();\r\n\r\n    private RecyclerView mRecyclerView;\r\n\r\n    @Nullable\r\n    private PagerChangedListener mPagerChangedListener;\r\n    /**\r\n     * 计算多出来的宽度，因为在均分的时候，存在除不尽的情况，要减去多出来的这部分大小，一般也就为几px\r\n     * 不减去的话，会导致翻页计算不触发\r\n     *\r\n     * @see #onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int)\r\n     */\r\n    private int diffWidth = 0;\r\n    /**\r\n     * 计算多出来的高度，因为在均分的时候，存在除不尽的情况，要减去多出来的这部分大小，一般也就为几px\r\n     * 不减去的话，会导致翻页计算不触发\r\n     *\r\n     * @see #onMeasure(RecyclerView.Recycler, RecyclerView.State, int, int)\r\n     */\r\n    private int diffHeight = 0;\r\n\r\n    private final RecyclerView.OnChildAttachStateChangeListener onChildAttachStateChangeListener = new RecyclerView.OnChildAttachStateChangeListener() {\r\n        @Override\r\n        public void onChildViewAttachedToWindow(@NonNull View view) {\r\n            LayoutParams layoutParams = (LayoutParams) view.getLayoutParams();\r\n            //判断ItemLayout的宽高是否是match_parent\r\n            if (layoutParams.width != ViewGroup.LayoutParams.MATCH_PARENT\r\n                    || layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {\r\n                throw new IllegalStateException(\"item layout must use match_parent\");\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onChildViewDetachedFromWindow(@NonNull View view) {\r\n            // nothing\r\n        }\r\n    };\r\n\r\n    private RecyclerView.OnItemTouchListener onItemTouchListener;\r\n\r\n    public PagerGridLayoutManager(@IntRange(from = 1) int rows, @IntRange(from = 1) int columns) {\r\n        this(rows, columns, HORIZONTAL);\r\n    }\r\n\r\n    public PagerGridLayoutManager(@IntRange(from = 1) int rows, @IntRange(from = 1) int columns, @Orientation int orientation) {\r\n        mRows = Math.max(rows, 1);\r\n        mColumns = Math.max(columns, 1);\r\n        setOrientation(orientation);\r\n    }\r\n\r\n    /**\r\n     * @return 子布局LayoutParams，默认全部填充，子布局会根据{@link #mRows}和{@link #mColumns} 均分RecyclerView\r\n     */\r\n    @Override\r\n    public final RecyclerView.LayoutParams generateDefaultLayoutParams() {\r\n        return new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n    }\r\n\r\n    @Override\r\n    public RecyclerView.LayoutParams generateLayoutParams(Context c, AttributeSet attrs) {\r\n        return new LayoutParams(c, attrs);\r\n    }\r\n\r\n    @Override\r\n    public RecyclerView.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp) {\r\n        if (lp instanceof RecyclerView.LayoutParams) {\r\n            return new LayoutParams((RecyclerView.LayoutParams) lp);\r\n        } else if (lp instanceof ViewGroup.MarginLayoutParams) {\r\n            return new LayoutParams((ViewGroup.MarginLayoutParams) lp);\r\n        } else {\r\n            return new LayoutParams(lp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean checkLayoutParams(RecyclerView.LayoutParams lp) {\r\n        return lp instanceof LayoutParams;\r\n    }\r\n\r\n    @Override\r\n    public void onAttachedToWindow(RecyclerView view) {\r\n        super.onAttachedToWindow(view);\r\n        if (DEBUG) {\r\n            Log.d(TAG, \"onAttachedToWindow: \");\r\n        }\r\n//        if (isInScrollingContainer(view)) {\r\n        //在一个可滑动的布局中，再添加监听，功能还没开发完成，先不添加\r\n//            onItemTouchListener = new PagerGridItemTouchListener(this, view);\r\n//            view.addOnItemTouchListener(onItemTouchListener);\r\n//        }\r\n        view.addOnChildAttachStateChangeListener(onChildAttachStateChangeListener);\r\n        mPagerGridSnapHelper = new PagerGridSnapHelper();\r\n        mPagerGridSnapHelper.attachToRecyclerView(view);\r\n        mRecyclerView = view;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAutoMeasureEnabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onMeasure(@NonNull RecyclerView.Recycler recycler, @NonNull RecyclerView.State state, int widthSpec, int heightSpec) {\r\n        int widthMode = View.MeasureSpec.getMode(widthSpec);\r\n        int heightMode = View.MeasureSpec.getMode(heightSpec);\r\n        //判断RecyclerView的宽度和高度是不是精确值\r\n        if (widthMode != View.MeasureSpec.EXACTLY || heightMode != View.MeasureSpec.EXACTLY) {\r\n            throw new IllegalStateException(\"RecyclerView's width and height must be exactly\");\r\n        }\r\n        int widthSize = View.MeasureSpec.getSize(widthSpec);\r\n        int heightSize = View.MeasureSpec.getSize(heightSpec);\r\n\r\n        int realWidth = widthSize - getPaddingStart() - getPaddingEnd();\r\n        int realHeight = heightSize - getPaddingTop() - getPaddingBottom();\r\n        //均分宽\r\n        mItemWidth = mColumns > 0 ? realWidth / mColumns : 0;\r\n        //均分高\r\n        mItemHeight = mRows > 0 ? realHeight / mRows : 0;\r\n\r\n        //重置下宽高，因为在均分的时候，存在除不尽的情况，要减去多出来的这部分大小，一般也就为几px\r\n        //不减去的话，会导致翻页计算不触发\r\n        diffWidth = realWidth - mItemWidth * mColumns;\r\n        diffHeight = realHeight - mItemHeight * mRows;\r\n\r\n        mItemWidthUsed = realWidth - diffWidth - mItemWidth;\r\n        mItemHeightUsed = realHeight - diffHeight - mItemHeight;\r\n\r\n        if (DEBUG) {\r\n            Log.d(TAG, \"onMeasure-originalWidthSize: \" + widthSize + \",originalHeightSize: \" + heightSize + \",diffWidth: \" + diffWidth + \",diffHeight: \" + diffHeight + \",mItemWidth: \" + mItemWidth + \",mItemHeight: \" + mItemHeight);\r\n        }\r\n        super.onMeasure(recycler, state, widthSpec, heightSpec);\r\n    }\r\n\r\n    @Override\r\n    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        if (DEBUG) {\r\n            Log.d(TAG, \"onLayoutChildren: \" + state.toString());\r\n        }\r\n        int itemCount = getItemCount();\r\n        if (itemCount == 0) {\r\n            removeAndRecycleAllViews(recycler);\r\n            setPagerCount(0);\r\n            setCurrentPagerIndex(NO_ITEM);\r\n            return;\r\n        }\r\n        if (state.isPreLayout()) {\r\n            return;\r\n        }\r\n        mOnePageSize = mRows * mColumns;\r\n\r\n        //计算总页数\r\n        int pagerCount = itemCount / mOnePageSize;\r\n        if (itemCount % mOnePageSize != 0) {\r\n            ++pagerCount;\r\n        }\r\n\r\n        //计算需要补充空间\r\n        mLayoutState.replenishDelta = 0;\r\n        if (pagerCount > 1) {\r\n            //超过一页，计算补充空间距离\r\n            int remain = itemCount % mOnePageSize;\r\n            int replenish = 0;\r\n            if (remain != 0) {\r\n                if (mOrientation == HORIZONTAL) {\r\n                    int i = remain / mRows;\r\n                    int k = remain % mRows;\r\n                    if (k != 0) {\r\n                        ++i;\r\n                    }\r\n                    replenish = (mColumns - i) * mItemWidth;\r\n                } else {\r\n                    int i = remain / mColumns;\r\n                    int k = remain % mColumns;\r\n                    if (k != 0) {\r\n                        ++i;\r\n                    }\r\n                    replenish = (mRows - i) * mItemHeight;\r\n                }\r\n            }\r\n            mLayoutState.replenishDelta = replenish;\r\n        }\r\n        int pagerIndex = mCurrentPagerIndex;\r\n        if (pagerIndex == NO_ITEM) {\r\n            pagerIndex = 0;\r\n        } else {\r\n            int maxPagerIndex = getMaxPagerIndex();\r\n            if (pagerIndex > maxPagerIndex) {\r\n                //如果之前的PagerIndex大于最大的PagerSize\r\n                pagerIndex = maxPagerIndex;\r\n            }\r\n        }\r\n\r\n        mLayoutState.mCurrentPosition = pagerIndex * mOnePageSize;\r\n\r\n        mLayoutState.mRecycle = false;\r\n        mLayoutState.mItemDirection = LayoutState.ITEM_DIRECTION_TAIL;\r\n        mLayoutState.mLayoutDirection = LayoutState.LAYOUT_END;\r\n        mLayoutState.mAvailable = getEnd();\r\n        mLayoutState.mScrollingOffset = LayoutState.SCROLLING_OFFSET_NaN;\r\n\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"onLayoutChildren-pagerCount:\" + pagerCount + \",mLayoutState.mAvailable: \" + mLayoutState.mAvailable);\r\n        }\r\n\r\n        //计算首个位置的偏移量，主要是为了方便child layout\r\n        int left;\r\n        int top;\r\n        int right;\r\n        int bottom;\r\n        if (mOrientation == RecyclerView.HORIZONTAL) {\r\n            bottom = getHeight() - getPaddingBottom();\r\n            right = getPaddingLeft();\r\n        } else {\r\n            bottom = getPaddingTop();\r\n            right = getWidth() - getPaddingRight();\r\n        }\r\n        top = bottom - mItemHeight;\r\n        left = right - mItemWidth;\r\n        mLayoutState.setOffsetRect(left, top, right, bottom);\r\n\r\n        //计算锚点的坐标\r\n        mStartSnapRect.set(getPaddingStart(), getPaddingTop(), getPaddingStart() + mItemWidth, getPaddingTop() + mItemHeight);\r\n        mEndSnapRect.set(getWidth() - getPaddingEnd() - mItemWidth, getHeight() - getPaddingBottom() - mItemHeight, getWidth() - getPaddingEnd(), getHeight() - getPaddingBottom());\r\n\r\n        //回收views\r\n        detachAndScrapAttachedViews(recycler);\r\n        //填充views\r\n        fill(recycler, state);\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"onLayoutChildren: childCount:\" + getChildCount() + \",recycler.scrapList.size:\" + recycler.getScrapList().size() + \",mLayoutState.replenishDelta:\" + mLayoutState.replenishDelta);\r\n        }\r\n        setPagerCount(pagerCount);\r\n        setCurrentPagerIndex(pagerIndex);\r\n    }\r\n\r\n    @Override\r\n    public void onLayoutCompleted(RecyclerView.State state) {\r\n\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View findViewByPosition(int position) {\r\n        final int childCount = getChildCount();\r\n        if (childCount == 0) {\r\n            return null;\r\n        }\r\n        final int firstChild = getPosition(getChildAt(0));\r\n        final int viewPosition = position - firstChild;\r\n        if (viewPosition >= 0 && viewPosition < childCount) {\r\n            final View child = getChildAt(viewPosition);\r\n            if (getPosition(child) == position) {\r\n                return child;\r\n            }\r\n        }\r\n        return super.findViewByPosition(position);\r\n    }\r\n\r\n    @Override\r\n    public int computeHorizontalScrollOffset(@NonNull RecyclerView.State state) {\r\n        return computeScrollOffset(state);\r\n    }\r\n\r\n    @Override\r\n    public int computeVerticalScrollOffset(@NonNull RecyclerView.State state) {\r\n        return computeScrollOffset(state);\r\n    }\r\n\r\n    @Override\r\n    public int computeHorizontalScrollExtent(@NonNull RecyclerView.State state) {\r\n        return computeScrollExtent(state);\r\n    }\r\n\r\n    @Override\r\n    public int computeVerticalScrollExtent(@NonNull RecyclerView.State state) {\r\n        return computeScrollExtent(state);\r\n    }\r\n\r\n    @Override\r\n    public int computeVerticalScrollRange(@NonNull RecyclerView.State state) {\r\n        return computeScrollRange(state);\r\n    }\r\n\r\n    @Override\r\n    public int computeHorizontalScrollRange(@NonNull RecyclerView.State state) {\r\n        return computeScrollRange(state);\r\n    }\r\n\r\n    private int computeScrollOffset(RecyclerView.State state) {\r\n        if (getChildCount() == 0 || state.getItemCount() == 0) {\r\n            return 0;\r\n        }\r\n        //目前先这么算吧。。。后面再优化\r\n        int scrollOffset = Math.max(mCurrentPagerIndex, 0) * getEnd();\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"computeScrollOffset: \" + scrollOffset);\r\n        }\r\n        return scrollOffset;\r\n    }\r\n\r\n    private int computeScrollExtent(RecyclerView.State state) {\r\n        if (getChildCount() == 0 || state.getItemCount() == 0) {\r\n            return 0;\r\n        }\r\n        int scrollExtent = getEnd();\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"computeScrollExtent: \" + scrollExtent);\r\n        }\r\n        return scrollExtent;\r\n    }\r\n\r\n    private int computeScrollRange(RecyclerView.State state) {\r\n        if (getChildCount() == 0 || state.getItemCount() == 0) {\r\n            return 0;\r\n        }\r\n        int scrollRange = Math.max(mPagerCount, 0) * getEnd();\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"computeScrollRange: \" + scrollRange);\r\n        }\r\n        return scrollRange;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public Parcelable onSaveInstanceState() {\r\n        if (DEBUG) {\r\n            Log.d(TAG, \"onSaveInstanceState: \");\r\n        }\r\n        SavedState state = new SavedState();\r\n        state.mOrientation = mOrientation;\r\n        state.mRows = mRows;\r\n        state.mColumns = mColumns;\r\n        state.mCurrentPagerIndex = mCurrentPagerIndex;\r\n        return state;\r\n    }\r\n\r\n    @Override\r\n    public void onRestoreInstanceState(Parcelable state) {\r\n        if (state instanceof SavedState) {\r\n            SavedState savedState = (SavedState) state;\r\n            mOrientation = savedState.mOrientation;\r\n            mRows = savedState.mRows;\r\n            mColumns = savedState.mColumns;\r\n            setCurrentPagerIndex(savedState.mCurrentPagerIndex);\r\n            requestLayout();\r\n            if (DEBUG) {\r\n                Log.d(TAG, \"onRestoreInstanceState: loaded saved state\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void scrollToPosition(int position) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        //先找到目标position所在第几页\r\n        int pagerIndex = getPagerIndexByPosition(position);\r\n        scrollToPagerIndex(pagerIndex);\r\n    }\r\n\r\n    @Override\r\n    public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        //先找到目标position所在第几页\r\n        int pagerIndex = getPagerIndexByPosition(position);\r\n        smoothScrollToPagerIndex(pagerIndex);\r\n    }\r\n\r\n    @Override\r\n    public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        if (mOrientation == VERTICAL) {\r\n            //垂直滑动不处理\r\n            return 0;\r\n        }\r\n        return scrollBy(dx, recycler, state);\r\n    }\r\n\r\n    @Override\r\n    public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        if (mOrientation == HORIZONTAL) {\r\n            //水平滑动不处理\r\n            return 0;\r\n        }\r\n        return scrollBy(dy, recycler, state);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onScrollStateChanged(int state) {\r\n        switch (state) {\r\n            case RecyclerView.SCROLL_STATE_IDLE://静止状态\r\n\r\n                break;\r\n            case RecyclerView.SCROLL_STATE_DRAGGING://手指拖拽\r\n\r\n                break;\r\n            case RecyclerView.SCROLL_STATE_SETTLING://自由滚动\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public final boolean canScrollHorizontally() {\r\n        return mOrientation == RecyclerView.HORIZONTAL;\r\n    }\r\n\r\n    @Override\r\n    public final boolean canScrollVertically() {\r\n        return mOrientation == RecyclerView.VERTICAL;\r\n    }\r\n\r\n    @Override\r\n    public final int getWidth() {\r\n        return super.getWidth() - getDiffWidth();\r\n    }\r\n\r\n    @Override\r\n    public final int getHeight() {\r\n        return super.getHeight() - getDiffHeight();\r\n    }\r\n\r\n    @Override\r\n    @CallSuper\r\n    public void onDetachedFromWindow(RecyclerView view, RecyclerView.Recycler recycler) {\r\n        super.onDetachedFromWindow(view, recycler);\r\n        if (DEBUG) {\r\n            Log.w(TAG, \"onDetachedFromWindow: \");\r\n        }\r\n        if (mRecyclerView != null) {\r\n            if (onItemTouchListener != null) {\r\n                mRecyclerView.removeOnItemTouchListener(onItemTouchListener);\r\n            }\r\n            mRecyclerView.removeOnChildAttachStateChangeListener(onChildAttachStateChangeListener);\r\n            mRecyclerView = null;\r\n        }\r\n        mPagerGridSnapHelper.attachToRecyclerView(null);\r\n        mPagerGridSnapHelper = null;\r\n        //这里不能置为null，因为在ViewPager2嵌套Fragment使用，\r\n        //部分情况下Fragment不回调onDestroyView，但会导致onDetachedFromWindow触发。\r\n        //所以如果想置null，请调用{@link #setPagerChangedListener(null)}\r\n//        mPagerChangedListener = null;\r\n    }\r\n\r\n    /**\r\n     * 设置监听回调\r\n     *\r\n     * @param listener\r\n     */\r\n    public void setPagerChangedListener(@Nullable PagerChangedListener listener) {\r\n        mPagerChangedListener = listener;\r\n    }\r\n\r\n\r\n    public final int getItemWidth() {\r\n        return mItemWidth;\r\n    }\r\n\r\n    public final int getItemHeight() {\r\n        return mItemHeight;\r\n    }\r\n\r\n    /**\r\n     * @return 一页的数量\r\n     */\r\n    public final int getOnePageSize() {\r\n        return mOnePageSize;\r\n    }\r\n\r\n    public void setColumns(@IntRange(from = 1) int columns) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        if (mColumns == columns) {\r\n            return;\r\n        }\r\n        mColumns = Math.max(columns, 1);\r\n        mPagerCount = NO_ITEM;\r\n        mCurrentPagerIndex = NO_ITEM;\r\n        requestLayout();\r\n    }\r\n\r\n    /**\r\n     * @return 列数\r\n     */\r\n    @IntRange(from = 1)\r\n    public final int getColumns() {\r\n        return mColumns;\r\n    }\r\n\r\n    public void setRows(@IntRange(from = 1) int rows) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        if (mRows == rows) {\r\n            return;\r\n        }\r\n        mRows = Math.max(rows, 1);\r\n        mPagerCount = NO_ITEM;\r\n        mCurrentPagerIndex = NO_ITEM;\r\n        requestLayout();\r\n    }\r\n\r\n    /**\r\n     * @return 行数\r\n     */\r\n    @IntRange(from = 1)\r\n    public final int getRows() {\r\n        return mRows;\r\n    }\r\n\r\n    /**\r\n     * 设置滑动方向\r\n     *\r\n     * @param orientation {@link #HORIZONTAL} or {@link #VERTICAL}\r\n     */\r\n    public void setOrientation(@Orientation int orientation) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        if (orientation != HORIZONTAL && orientation != VERTICAL) {\r\n            throw new IllegalArgumentException(\"invalid orientation:\" + orientation);\r\n        }\r\n        if (orientation != mOrientation) {\r\n            mOrientation = orientation;\r\n\r\n            requestLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param position position\r\n     * @return 获取当前position所在页下标\r\n     */\r\n    public final int getPagerIndexByPosition(int position) {\r\n        return position / mOnePageSize;\r\n    }\r\n\r\n    /**\r\n     * @return 获取最大页数\r\n     */\r\n    public final int getMaxPagerIndex() {\r\n        return getPagerIndexByPosition(getItemCount() - 1);\r\n    }\r\n\r\n    /**\r\n     * 直接滚到第几页\r\n     *\r\n     * @param pagerIndex 第几页\r\n     */\r\n    public void scrollToPagerIndex(@IntRange(from = 0) int pagerIndex) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        //先找到目标position所在第几页\r\n        pagerIndex = Math.min(Math.max(pagerIndex, 0), getMaxPagerIndex());\r\n        if (pagerIndex == mCurrentPagerIndex) {\r\n            //同一页直接return\r\n            return;\r\n        }\r\n        setCurrentPagerIndex(pagerIndex);\r\n        requestLayout();\r\n    }\r\n\r\n    /**\r\n     * 直接滚动到上一页\r\n     */\r\n    public void scrollToPrePager() {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        scrollToPagerIndex(mCurrentPagerIndex - 1);\r\n    }\r\n\r\n    /**\r\n     * 直接滚动到下一页\r\n     */\r\n    public void scrollToNextPager() {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        scrollToPagerIndex(mCurrentPagerIndex + 1);\r\n    }\r\n\r\n    /**\r\n     * 平滑滚到第几页，为避免长时间滚动，会预先跳转到就近位置，默认3页\r\n     *\r\n     * @param pagerIndex 第几页，下标从0开始\r\n     */\r\n    public void smoothScrollToPagerIndex(@IntRange(from = 0) int pagerIndex) {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        pagerIndex = Math.min(Math.max(pagerIndex, 0), getMaxPagerIndex());\r\n        int previousIndex = mCurrentPagerIndex;\r\n        if (pagerIndex == previousIndex) {\r\n            //同一页直接return\r\n            return;\r\n        }\r\n        boolean isLayoutToEnd = pagerIndex > previousIndex;\r\n\r\n        if (Math.abs(pagerIndex - previousIndex) > 3) {\r\n            //先就近直接跳转\r\n            int transitionIndex = pagerIndex > previousIndex ? pagerIndex - 3 : pagerIndex + 3;\r\n            scrollToPagerIndex(transitionIndex);\r\n\r\n            if (mRecyclerView != null) {\r\n                mRecyclerView.post(new SmoothScrollToPosition(getPositionByPagerIndex(pagerIndex, isLayoutToEnd), this, mRecyclerView));\r\n            }\r\n        } else {\r\n            PagerGridSmoothScroller smoothScroller = new PagerGridSmoothScroller(mRecyclerView);\r\n            smoothScroller.setTargetPosition(getPositionByPagerIndex(pagerIndex, isLayoutToEnd));\r\n            startSmoothScroll(smoothScroller);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 平滑到上一页\r\n     */\r\n    public void smoothScrollToPrePager() {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        smoothScrollToPagerIndex(mCurrentPagerIndex - 1);\r\n    }\r\n\r\n    /**\r\n     * 平滑到下一页\r\n     */\r\n    public void smoothScrollToNextPager() {\r\n        if (!isIdle()) {\r\n            return;\r\n        }\r\n        smoothScrollToPagerIndex(mCurrentPagerIndex + 1);\r\n    }\r\n\r\n    /**\r\n     * 设置总页数\r\n     *\r\n     * @param pagerCount\r\n     */\r\n    private void setPagerCount(int pagerCount) {\r\n        if (mPagerCount == pagerCount) {\r\n            return;\r\n        }\r\n        mPagerCount = pagerCount;\r\n        if (mPagerChangedListener != null) {\r\n            mPagerChangedListener.onPagerCountChanged(pagerCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 返回总页数\r\n     *\r\n     * @return 0：{@link #getItemCount()} is 0\r\n     */\r\n    @IntRange(from = 0)\r\n    public final int getPagerCount() {\r\n        return Math.max(mPagerCount, 0);\r\n    }\r\n\r\n    /**\r\n     * 设置当前页码\r\n     *\r\n     * @param pagerIndex 页码\r\n     */\r\n    private void setCurrentPagerIndex(int pagerIndex) {\r\n        if (mCurrentPagerIndex == pagerIndex) {\r\n            return;\r\n        }\r\n        int prePagerIndex = mCurrentPagerIndex;\r\n        mCurrentPagerIndex = pagerIndex;\r\n        if (mPagerChangedListener != null) {\r\n            mPagerChangedListener.onPagerIndexSelected(prePagerIndex, pagerIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前的页码\r\n     *\r\n     * @return -1：{@link #getItemCount()} is 0,{@link #NO_ITEM} . else {@link #mCurrentPagerIndex}\r\n     */\r\n    @IntRange(from = -1)\r\n    public final int getCurrentPagerIndex() {\r\n        return mCurrentPagerIndex;\r\n    }\r\n\r\n    /**\r\n     * 由于View类中这个方法无法使用，直接copy处理\r\n     *\r\n     * @param view\r\n     * @return 判断view是不是处在一个可滑动的布局中\r\n     * @see ViewGroup#shouldDelayChildPressedState()\r\n     */\r\n    private boolean isInScrollingContainer(View view) {\r\n        ViewParent p = view.getParent();\r\n        while (p instanceof ViewGroup) {\r\n            if (((ViewGroup) p).shouldDelayChildPressedState()) {\r\n                return true;\r\n            }\r\n            p = p.getParent();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 根据页码下标获取position\r\n     *\r\n     * @param pagerIndex    页码\r\n     * @param isLayoutToEnd true:页的第一个位置，false:页的最后一个位置\r\n     * @return\r\n     */\r\n    private int getPositionByPagerIndex(int pagerIndex, boolean isLayoutToEnd) {\r\n        return isLayoutToEnd ? pagerIndex * mOnePageSize : pagerIndex * mOnePageSize + mOnePageSize - 1;\r\n    }\r\n\r\n    public final int getDiffWidth() {\r\n        return Math.max(diffWidth, 0);\r\n    }\r\n\r\n    public final int getDiffHeight() {\r\n        return Math.max(diffHeight, 0);\r\n    }\r\n\r\n    /**\r\n     * 获取真实宽度\r\n     *\r\n     * @return\r\n     */\r\n    private int getRealWidth() {\r\n        return getWidth() - getPaddingStart() - getPaddingEnd();\r\n    }\r\n\r\n    /**\r\n     * 获取真实高度\r\n     *\r\n     * @return\r\n     */\r\n    private int getRealHeight() {\r\n        return getHeight() - getPaddingTop() - getPaddingBottom();\r\n    }\r\n\r\n    /**\r\n     * 填充布局\r\n     *\r\n     * @param recycler\r\n     * @param state\r\n     * @return 添加的像素数，用于滚动\r\n     */\r\n    private int fill(RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        LayoutState layoutState = mLayoutState;\r\n        int start = layoutState.mAvailable;\r\n        int remainingSpace = layoutState.mAvailable;\r\n        LayoutChunkResult layoutChunkResult = mLayoutChunkResult;\r\n        while (remainingSpace > 0 && layoutState.hasMore(state)) {\r\n            layoutChunk(recycler, state, layoutState, layoutChunkResult);\r\n            layoutState.mAvailable -= layoutChunkResult.mConsumed;\r\n            remainingSpace -= layoutChunkResult.mConsumed;\r\n        }\r\n        boolean layoutToEnd = layoutState.mLayoutDirection == LayoutState.LAYOUT_END;\r\n        //因为最后一列或者一行可能只绘制了收尾的一个，补满\r\n        while (layoutState.hasMore(state)) {\r\n            boolean isNeedMoveSpan = layoutToEnd ? isNeedMoveToNextSpan(layoutState.mCurrentPosition) : isNeedMoveToPreSpan(layoutState.mCurrentPosition);\r\n            if (isNeedMoveSpan) {\r\n                //如果需要切换行或列，直接退出\r\n                break;\r\n            }\r\n            layoutChunk(recycler, state, layoutState, layoutChunkResult);\r\n        }\r\n        //回收View\r\n        recycleViews(recycler);\r\n        return start - layoutState.mAvailable;\r\n    }\r\n\r\n    /**\r\n     * 填充View\r\n     * 直接绘制一行或者一列\r\n     *\r\n     * @param recycler\r\n     * @param state\r\n     * @param layoutState\r\n     * @param layoutChunkResult\r\n     */\r\n    private void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state, LayoutState layoutState, LayoutChunkResult layoutChunkResult) {\r\n        boolean layoutToEnd = layoutState.mLayoutDirection == LayoutState.LAYOUT_END;\r\n        int position = layoutState.mCurrentPosition;\r\n        View view = layoutState.next(recycler);\r\n        if (layoutToEnd) {\r\n            addView(view);\r\n        } else {\r\n            addView(view, 0);\r\n        }\r\n        measureChildWithMargins(view, mItemWidthUsed, mItemHeightUsed);\r\n        //是否需要换行或者换列\r\n        boolean isNeedMoveSpan = layoutToEnd ? isNeedMoveToNextSpan(position) : isNeedMoveToPreSpan(position);\r\n\r\n        layoutChunkResult.mConsumed = isNeedMoveSpan ? (mOrientation == HORIZONTAL ? mItemWidth : mItemHeight) : 0;\r\n\r\n        //记录的上一个View的位置\r\n        Rect rect = layoutState.mOffsetRect;\r\n        int left;\r\n        int top;\r\n        int right;\r\n        int bottom;\r\n        if (mOrientation == HORIZONTAL) {\r\n            //水平滑动\r\n            if (layoutToEnd) {\r\n                //向后填充，绘制方向：从上到下\r\n                if (isNeedMoveSpan) {\r\n                    //下一列绘制，从头部开始\r\n                    left = rect.left + mItemWidth;\r\n                    top = getPaddingTop();\r\n                } else {\r\n                    //当前列绘制\r\n                    left = rect.left;\r\n                    top = rect.bottom;\r\n                }\r\n                right = left + mItemWidth;\r\n                bottom = top + mItemHeight;\r\n            } else {\r\n                //向前填充，绘制方向：从下到上\r\n                if (isNeedMoveSpan) {\r\n                    //上一列绘制，从底部开启\r\n                    left = rect.left - mItemWidth;\r\n                    bottom = getHeight() - getPaddingBottom();\r\n                } else {\r\n                    //当前列绘制\r\n                    left = rect.left;\r\n                    bottom = rect.top;\r\n                }\r\n                top = bottom - mItemHeight;\r\n                right = left + mItemWidth;\r\n            }\r\n        } else {\r\n            //垂直滑动\r\n            if (layoutToEnd) {\r\n                //向后填充，绘制方向：从左到右\r\n                if (isNeedMoveSpan) {\r\n                    //下一行绘制，从头部开始\r\n                    left = getPaddingLeft();\r\n                    top = rect.bottom;\r\n                } else {\r\n                    //当前行绘制\r\n                    left = rect.left + mItemWidth;\r\n                    top = rect.top;\r\n                }\r\n                right = left + mItemWidth;\r\n                bottom = top + mItemHeight;\r\n            } else {\r\n                //向前填充，绘制方向：从右到左\r\n                if (isNeedMoveSpan) {\r\n                    //上一行绘制，从尾部开始\r\n                    right = getWidth() - getPaddingRight();\r\n                    left = right - mItemWidth;\r\n                    bottom = rect.top;\r\n                    top = bottom - mItemHeight;\r\n                } else {\r\n                    //当前行绘制\r\n                    left = rect.left - mItemWidth;\r\n                    top = rect.top;\r\n                    right = left + mItemWidth;\r\n                    bottom = top + mItemHeight;\r\n                }\r\n            }\r\n        }\r\n        layoutState.setOffsetRect(left, top, right, bottom);\r\n        layoutDecoratedWithMargins(view, left, top, right, bottom);\r\n    }\r\n\r\n    /**\r\n     * @param delta    手指滑动的距离\r\n     * @param recycler\r\n     * @param state\r\n     * @return\r\n     */\r\n    private int scrollBy(int delta, RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        if (getChildCount() == 0 || delta == 0 || mPagerCount == 1) {\r\n            return 0;\r\n        }\r\n        mLayoutState.mRecycle = true;\r\n        final int layoutDirection = delta > 0 ? LayoutState.LAYOUT_END : LayoutState.LAYOUT_START;\r\n        mLayoutState.mLayoutDirection = layoutDirection;\r\n        boolean layoutToEnd = layoutDirection == LayoutState.LAYOUT_END;\r\n        final int absDelta = Math.abs(delta);\r\n        updateLayoutState(layoutToEnd, absDelta, true, state);\r\n        int consumed = mLayoutState.mScrollingOffset + fill(recycler, state);\r\n        if (layoutToEnd) {\r\n            //向后滑动，添加补充距离\r\n            consumed += mLayoutState.replenishDelta;\r\n        }\r\n        if (consumed < 0) {\r\n            return 0;\r\n        }\r\n        //是否已经完全填充到头部或者尾部，滑动的像素>消费的像素\r\n        boolean isOver = absDelta > consumed;\r\n        //计算实际可移动值\r\n        int scrolled = isOver ? layoutDirection * consumed : delta;\r\n        //移动\r\n        offsetChildren(-scrolled);\r\n        mLayoutState.mLastScrollDelta = scrolled;\r\n        if (DEBUG) {\r\n            Log.i(TAG, \"scrollBy: childCount:\" + getChildCount() + \",recycler.scrapList.size:\" + recycler.getScrapList().size() + \",delta:\" + delta + \",scrolled:\" + scrolled);\r\n        }\r\n        return scrolled;\r\n    }\r\n\r\n    private void updateLayoutState(boolean layoutToEnd, int requiredSpace,\r\n                                   boolean canUseExistingSpace, RecyclerView.State state) {\r\n        mLayoutState.mItemDirection = layoutToEnd ? LayoutState.ITEM_DIRECTION_TAIL : LayoutState.ITEM_DIRECTION_HEAD;\r\n        View child;\r\n        //计算在不添加新view的情况下可以滚动多少（与布局无关）\r\n        int scrollingOffset;\r\n        if (layoutToEnd) {\r\n            child = getChildClosestToEnd();\r\n            scrollingOffset = getDecoratedEnd(child) - getEndAfterPadding();\r\n        } else {\r\n            child = getChildClosestToStart();\r\n            scrollingOffset = -getDecoratedStart(child) + getStartAfterPadding();\r\n        }\r\n        getDecoratedBoundsWithMargins(child, mLayoutState.mOffsetRect);\r\n        mLayoutState.mCurrentPosition = getPosition(child) + mLayoutState.mItemDirection;\r\n        mLayoutState.mAvailable = requiredSpace;\r\n        if (canUseExistingSpace) {\r\n            mLayoutState.mAvailable -= scrollingOffset;\r\n        }\r\n        mLayoutState.mScrollingOffset = scrollingOffset;\r\n    }\r\n\r\n    private View getChildClosestToEnd() {\r\n        return getChildAt(getChildCount() - 1);\r\n    }\r\n\r\n    private View getChildClosestToStart() {\r\n        return getChildAt(0);\r\n    }\r\n\r\n    /**\r\n     * 回收View\r\n     *\r\n     * @param recycler\r\n     */\r\n    private void recycleViews(RecyclerView.Recycler recycler) {\r\n        //是否回收view\r\n        if (!mLayoutState.mRecycle) {\r\n            return;\r\n        }\r\n        if (mLayoutState.mLayoutDirection == LayoutState.LAYOUT_START) {\r\n            //水平向左或者垂直向上滑动\r\n            recycleViewsFromEnd(recycler);\r\n        } else {\r\n            //水平向右或者垂直向下滑动\r\n            recycleViewsFromStart(recycler);\r\n        }\r\n    }\r\n\r\n    private void recycleViewsFromStart(RecyclerView.Recycler recycler) {\r\n        int start = getPaddingStart();\r\n        int childCount = getChildCount();\r\n        for (int i = childCount - 1; i >= 0; i--) {\r\n            View childAt = getChildAt(i);\r\n            if (childAt != null) {\r\n                int decorated = getDecoratedEnd(childAt);\r\n                if (decorated > start) {\r\n                    continue;\r\n                }\r\n                removeAndRecycleView(childAt, recycler);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void recycleViewsFromEnd(RecyclerView.Recycler recycler) {\r\n        int end = getEndAfterPadding();\r\n        int childCount = getChildCount();\r\n        for (int i = childCount - 1; i >= 0; i--) {\r\n            View childAt = getChildAt(i);\r\n            if (childAt != null) {\r\n                int decorated = getDecoratedStart(childAt);\r\n                if (decorated < end) {\r\n                    continue;\r\n                }\r\n                removeAndRecycleView(childAt, recycler);\r\n            }\r\n        }\r\n    }\r\n\r\n    private int getDecoratedEnd(View child) {\r\n        final LayoutParams params = (LayoutParams) child.getLayoutParams();\r\n        return mOrientation == HORIZONTAL ? getDecoratedRight(child) + params.rightMargin : getDecoratedBottom(child) + params.bottomMargin;\r\n    }\r\n\r\n    private int getDecoratedStart(View child) {\r\n        final LayoutParams params = (LayoutParams) child.getLayoutParams();\r\n        return mOrientation == HORIZONTAL ? getDecoratedLeft(child) - params.leftMargin : getDecoratedTop(child) - params.topMargin;\r\n    }\r\n\r\n    private int getEndAfterPadding() {\r\n        return mOrientation == HORIZONTAL ? getWidth() - getPaddingEnd() : getHeight() - getPaddingBottom();\r\n    }\r\n\r\n    private int getStartAfterPadding() {\r\n        return mOrientation == HORIZONTAL ? getPaddingStart() : getPaddingTop();\r\n    }\r\n\r\n    private int getEnd() {\r\n        return mOrientation == HORIZONTAL ? getRealWidth() : getRealHeight();\r\n    }\r\n\r\n    /**\r\n     * 移动Children\r\n     *\r\n     * @param delta 移动偏移量\r\n     */\r\n    private void offsetChildren(int delta) {\r\n        if (mOrientation == HORIZONTAL) {\r\n            offsetChildrenHorizontal(delta);\r\n        } else {\r\n            offsetChildrenVertical(delta);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return 当前Recycler是否是静止状态\r\n     */\r\n    private boolean isIdle() {\r\n        return mRecyclerView == null || mRecyclerView.getScrollState() == RecyclerView.SCROLL_STATE_IDLE;\r\n    }\r\n\r\n    /**\r\n     * @param position\r\n     * @return 是否需要换到下一行或列\r\n     */\r\n    private boolean isNeedMoveToNextSpan(int position) {\r\n        return mOrientation == HORIZONTAL ? position % mRows == 0 : position % mColumns == 0;\r\n    }\r\n\r\n    /**\r\n     * @param position\r\n     * @return 是否需要换到下一行或列\r\n     */\r\n    private boolean isNeedMoveToPreSpan(int position) {\r\n        return mOrientation == HORIZONTAL ? position % mRows == mRows - 1 : position % mColumns == mColumns - 1;\r\n    }\r\n\r\n    /**\r\n     * @return 左上角第一个view的位置\r\n     */\r\n    final Rect getStartSnapRect() {\r\n        return mStartSnapRect;\r\n    }\r\n\r\n    /**\r\n     * @return 右下角最后一个view的位置\r\n     */\r\n    final Rect getEndSnapRect() {\r\n        return mEndSnapRect;\r\n    }\r\n\r\n    /**\r\n     * 根据下标计算页码\r\n     *\r\n     * @param position\r\n     */\r\n    final void calculateCurrentPagerIndexByPosition(int position) {\r\n        setCurrentPagerIndex(getPagerIndexByPosition(position));\r\n    }\r\n\r\n    final LayoutState getLayoutState() {\r\n        return mLayoutState;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public PointF computeScrollVectorForPosition(int targetPosition) {\r\n        int childCount = getChildCount();\r\n        if (childCount == 0) {\r\n            return null;\r\n        }\r\n        int firstSnapPosition = RecyclerView.NO_POSITION;\r\n        for (int i = childCount - 1; i >= 0; i--) {\r\n            View childAt = getChildAt(i);\r\n            if (childAt != null) {\r\n                int position = getPosition(childAt);\r\n                if (position % getOnePageSize() == 0) {\r\n                    firstSnapPosition = position;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (firstSnapPosition == RecyclerView.NO_POSITION) {\r\n            return null;\r\n        }\r\n        float direction = targetPosition < firstSnapPosition ? -1f : 1f;\r\n        if (mOrientation == HORIZONTAL) {\r\n            return new PointF(direction, 0f);\r\n        } else {\r\n            return new PointF(0f, direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 自定义LayoutParams\r\n     */\r\n    public static class LayoutParams extends RecyclerView.LayoutParams {\r\n\r\n        public LayoutParams(Context c, AttributeSet attrs) {\r\n            super(c, attrs);\r\n        }\r\n\r\n        public LayoutParams(int width, int height) {\r\n            super(width, height);\r\n        }\r\n\r\n        public LayoutParams(ViewGroup.MarginLayoutParams source) {\r\n            super(source);\r\n        }\r\n\r\n        public LayoutParams(ViewGroup.LayoutParams source) {\r\n            super(source);\r\n        }\r\n\r\n        public LayoutParams(RecyclerView.LayoutParams source) {\r\n            super(source);\r\n        }\r\n\r\n    }\r\n\r\n    private static class SmoothScrollToPosition implements Runnable {\r\n        private final int mPosition;\r\n        @NonNull\r\n        private final PagerGridLayoutManager mLayoutManager;\r\n        @NonNull\r\n        private final RecyclerView mRecyclerView;\r\n\r\n        SmoothScrollToPosition(int position, @NonNull PagerGridLayoutManager layoutManager, @NonNull RecyclerView recyclerView) {\r\n            mPosition = position;\r\n            mLayoutManager = layoutManager;\r\n            mRecyclerView = recyclerView;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            PagerGridSmoothScroller smoothScroller = new PagerGridSmoothScroller(mRecyclerView);\r\n            smoothScroller.setTargetPosition(mPosition);\r\n            mLayoutManager.startSmoothScroll(smoothScroller);\r\n        }\r\n    }\r\n\r\n    protected static class LayoutState {\r\n\r\n        protected static final int LAYOUT_START = -1;\r\n\r\n        protected static final int LAYOUT_END = 1;\r\n\r\n        protected static final int ITEM_DIRECTION_HEAD = -1;\r\n\r\n        protected static final int ITEM_DIRECTION_TAIL = 1;\r\n\r\n        protected static final int SCROLLING_OFFSET_NaN = Integer.MIN_VALUE;\r\n\r\n        /**\r\n         * 可填充的View空间大小\r\n         */\r\n        protected int mAvailable;\r\n        /**\r\n         * 是否需要回收View\r\n         */\r\n        protected boolean mRecycle;\r\n\r\n        protected int mCurrentPosition;\r\n        /**\r\n         * 遍历Adapter数据的方向\r\n         * 值为 {@link #LAYOUT_START} or {@link #LAYOUT_END}\r\n         */\r\n        protected int mItemDirection;\r\n        /**\r\n         * 布局的填充方向\r\n         * 值为 {@link #LAYOUT_START} or {@link #LAYOUT_END}\r\n         */\r\n        protected int mLayoutDirection;\r\n        /**\r\n         * 在滚动状态下构造布局状态时使用。\r\n         * 它应该设置我们可以在不创建新视图的情况下进行滚动量。\r\n         * 有效的视图回收需要设置\r\n         */\r\n        protected int mScrollingOffset;\r\n        /**\r\n         * 开始绘制的坐标位置\r\n         */\r\n        protected Rect mOffsetRect;\r\n        /**\r\n         * 最近一次的滑动数量\r\n         */\r\n        protected int mLastScrollDelta;\r\n        /**\r\n         * 需要补充滑动的距离\r\n         */\r\n        protected int replenishDelta;\r\n\r\n        protected LayoutState() {\r\n        }\r\n\r\n        protected void setOffsetRect(int left, int top, int right, int bottom) {\r\n            if (mOffsetRect == null) {\r\n                mOffsetRect = new Rect();\r\n            }\r\n            mOffsetRect.set(left, top, right, bottom);\r\n        }\r\n\r\n        protected View next(RecyclerView.Recycler recycler) {\r\n            View view = recycler.getViewForPosition(mCurrentPosition);\r\n            mCurrentPosition += mItemDirection;\r\n            return view;\r\n        }\r\n\r\n        protected boolean hasMore(RecyclerView.State state) {\r\n            return mCurrentPosition >= 0 && mCurrentPosition < state.getItemCount();\r\n        }\r\n    }\r\n\r\n    protected static class LayoutChunkResult {\r\n        protected int mConsumed;\r\n        protected boolean mFinished;\r\n        protected boolean mIgnoreConsumed;\r\n        protected boolean mFocusable;\r\n\r\n        protected void resetInternal() {\r\n            mConsumed = 0;\r\n            mFinished = false;\r\n            mIgnoreConsumed = false;\r\n            mFocusable = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see RecyclerView.LayoutManager#onSaveInstanceState()\r\n     * @see RecyclerView.LayoutManager#onRestoreInstanceState(Parcelable)\r\n     */\r\n    protected static class SavedState implements Parcelable {\r\n        /**\r\n         * 当前滑动方向\r\n         */\r\n        protected int mOrientation;\r\n        /**\r\n         * 行数\r\n         */\r\n        protected int mRows;\r\n        /**\r\n         * 列数\r\n         */\r\n        protected int mColumns;\r\n        /**\r\n         * 当前页码下标\r\n         * 从0开始\r\n         */\r\n        protected int mCurrentPagerIndex = NO_ITEM;\r\n\r\n\r\n        @Override\r\n        public int describeContents() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void writeToParcel(Parcel dest, int flags) {\r\n            dest.writeInt(this.mOrientation);\r\n            dest.writeInt(this.mRows);\r\n            dest.writeInt(this.mColumns);\r\n            dest.writeInt(this.mCurrentPagerIndex);\r\n        }\r\n\r\n        public void readFromParcel(Parcel source) {\r\n            this.mOrientation = source.readInt();\r\n            this.mRows = source.readInt();\r\n            this.mColumns = source.readInt();\r\n            this.mCurrentPagerIndex = source.readInt();\r\n        }\r\n\r\n        public SavedState() {\r\n        }\r\n\r\n        protected SavedState(Parcel in) {\r\n            this.mOrientation = in.readInt();\r\n            this.mRows = in.readInt();\r\n            this.mColumns = in.readInt();\r\n            this.mCurrentPagerIndex = in.readInt();\r\n        }\r\n\r\n        public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator<SavedState>() {\r\n            @Override\r\n            public SavedState createFromParcel(Parcel source) {\r\n                return new SavedState(source);\r\n            }\r\n\r\n            @Override\r\n            public SavedState[] newArray(int size) {\r\n                return new SavedState[size];\r\n            }\r\n        };\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"SavedState{\" +\r\n                    \"mOrientation=\" + mOrientation +\r\n                    \", mRows=\" + mRows +\r\n                    \", mColumns=\" + mColumns +\r\n                    \", mCurrentPagerIndex=\" + mCurrentPagerIndex +\r\n                    '}';\r\n        }\r\n    }\r\n\r\n    public interface PagerChangedListener {\r\n        /**\r\n         * 页面总数量变化\r\n         *\r\n         * @param pagerCount 页面总数\r\n         */\r\n        void onPagerCountChanged(@IntRange(from = 0) int pagerCount);\r\n\r\n        /**\r\n         * 选中的页面下标\r\n         *\r\n         * @param prePagerIndex     上次的页码，当{{@link #getItemCount()}}为0时，为-1，{{@link #NO_ITEM}}\r\n         * @param currentPagerIndex 当前的页码，当{{@link #getItemCount()}}为0时，为-1，{{@link #NO_ITEM}}\r\n         */\r\n        void onPagerIndexSelected(@IntRange(from = -1) int prePagerIndex, @IntRange(from = -1) int currentPagerIndex);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridLayoutManager.java b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridLayoutManager.java
--- a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridLayoutManager.java	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridLayoutManager.java	(date 1632991084754)
@@ -36,7 +36,7 @@
     /**
      * 是否启用Debug
      */
-    public static final boolean DEBUG = false;
+    static boolean DEBUG = BuildConfig.DEBUG;
     /**
      * 水平滑动
      */
@@ -165,6 +165,15 @@
         setOrientation(orientation);
     }
 
+    /**
+     * print logcat
+     *
+     * @param debug is debug
+     */
+    public static void setDebug(boolean debug) {
+        DEBUG = debug;
+    }
+
     /**
      * @return 子布局LayoutParams，默认全部填充，子布局会根据{@link #mRows}和{@link #mColumns} 均分RecyclerView
      */
@@ -1200,7 +1209,7 @@
             View childAt = getChildAt(i);
             if (childAt != null) {
                 int position = getPosition(childAt);
-                if (position % getOnePageSize() == 0) {
+                if (position % mOnePageSize == 0) {
                     firstSnapPosition = position;
                     break;
                 }
@@ -1209,6 +1218,9 @@
         if (firstSnapPosition == RecyclerView.NO_POSITION) {
             return null;
         }
+        if (DEBUG) {
+            Log.w(TAG, "computeScrollVectorForPosition-firstSnapPosition: " + firstSnapPosition + ", targetPosition:" + targetPosition);
+        }
         float direction = targetPosition < firstSnapPosition ? -1f : 1f;
         if (mOrientation == HORIZONTAL) {
             return new PointF(direction, 0f);
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion rootProject.ext.android.compileSdkVersion\r\n    buildToolsVersion rootProject.ext.android.buildToolsVersion\r\n\r\n    defaultConfig {\r\n        applicationId \"com.shencoder.demo\"\r\n        minSdkVersion rootProject.ext.android.minSdkVersion\r\n        targetSdkVersion rootProject.ext.android.targetSdkVersion\r\n        versionCode rootProject.ext.android.versionCode\r\n        versionName rootProject.ext.android.versionName\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.3.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n    implementation \"androidx.viewpager2:viewpager2:1.0.0\"\r\n    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.6'\r\n    implementation project(path: ':pagergridlayoutmanager')\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/app/build.gradle	(date 1632984731811)
@@ -19,6 +19,11 @@
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         }
+
+        debug {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
     }
 
     compileOptions {
@@ -39,5 +44,7 @@
     implementation 'androidx.recyclerview:recyclerview:1.2.1'
     implementation "androidx.viewpager2:viewpager2:1.0.0"
     implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.6'
+    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
     implementation project(path: ':pagergridlayoutmanager')
+//    implementation 'com.github.shenbengit:PagerGridLayoutManager:0.0.1'
 }
\ No newline at end of file
Index: pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.pagergridlayoutmanager;\r\n\r\nimport android.graphics.PointF;\r\nimport android.graphics.Rect;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.LinearSmoothScroller;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\n/**\r\n * @author ShenBen\r\n * @date 2021/02/18 11:40\r\n * @email 714081644@qq.com\r\n */\r\nclass PagerGridSmoothScroller extends LinearSmoothScroller {\r\n    private static final String TAG = \"PagerGridSmoothScroller\";\r\n\r\n    private final RecyclerView mRecyclerView;\r\n    private static final float MILLISECONDS_PER_INCH = 100f;\r\n    private static final int MAX_SCROLL_ON_FLING_DURATION = 100; //ms\r\n\r\n    PagerGridSmoothScroller(@NonNull RecyclerView recyclerView) {\r\n        super(recyclerView.getContext());\r\n        mRecyclerView = recyclerView;\r\n    }\r\n\r\n    /**\r\n     * 该方法会在targetSnapView被layout出来的时候调用。\r\n     *\r\n     * @param targetView targetSnapView\r\n     * @param state\r\n     * @param action\r\n     */\r\n    @Override\r\n    protected void onTargetFound(View targetView, RecyclerView.State state, Action action) {\r\n        RecyclerView.LayoutManager layoutManager = getLayoutManager();\r\n        if (layoutManager instanceof PagerGridLayoutManager) {\r\n            PagerGridLayoutManager manager = (PagerGridLayoutManager) layoutManager;\r\n\r\n            int targetPosition = manager.getPosition(targetView);\r\n\r\n            PointF pointF = computeScrollVectorForPosition(targetPosition);\r\n            if (pointF == null) {\r\n                //为null，则不处理\r\n                return;\r\n            }\r\n\r\n            boolean isLayoutToEnd = pointF.x > 0 || pointF.y > 0;\r\n            Rect snapRect;\r\n            if (isLayoutToEnd) {\r\n                snapRect = manager.getStartSnapRect();\r\n            } else {\r\n                snapRect = manager.getEndSnapRect();\r\n            }\r\n            Rect targetRect = new Rect();\r\n            layoutManager.getDecoratedBoundsWithMargins(targetView, targetRect);\r\n            int dx = calculateDx(manager, snapRect, targetRect, isLayoutToEnd);\r\n            int dy = calculateDy(manager, snapRect, targetRect, isLayoutToEnd);\r\n            final int time = calculateTimeForDeceleration(Math.max(Math.abs(dx), Math.abs(dy)));\r\n            if (PagerGridLayoutManager.DEBUG) {\r\n                Log.i(TAG, \"onTargetFound-targetPosition:\" + targetPosition + \", dx:\" + dx + \",dy:\" + dy + \",time:\" + time + \",snapRect:\" + snapRect + \",targetRect:\" + targetRect);\r\n            }\r\n            if (time > 0) {\r\n                action.update(dx, dy, time, mDecelerateInterpolator);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {\r\n        return MILLISECONDS_PER_INCH / displayMetrics.densityDpi;\r\n    }\r\n\r\n    @Override\r\n    protected int calculateTimeForScrolling(int dx) {\r\n        return Math.min(MAX_SCROLL_ON_FLING_DURATION, super.calculateTimeForScrolling(dx));\r\n    }\r\n\r\n    public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {\r\n        if (!manager.canScrollHorizontally()) {\r\n            return 0;\r\n        }\r\n        return targetRect.left - snapRect.left;\r\n    }\r\n\r\n    public static int calculateDy(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {\r\n        if (!manager.canScrollVertically()) {\r\n            return 0;\r\n        }\r\n        return targetRect.top - snapRect.top;\r\n    }\r\n\r\n    public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect, boolean isLayoutToEnd) {\r\n        if (!manager.canScrollHorizontally()) {\r\n            return 0;\r\n        }\r\n        return isLayoutToEnd ? (targetRect.left - snapRect.left) : (targetRect.right - snapRect.right);\r\n    }\r\n\r\n    public static int calculateDy(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect, boolean isLayoutToEnd) {\r\n        if (!manager.canScrollVertically()) {\r\n            return 0;\r\n        }\r\n        return isLayoutToEnd ? (targetRect.top - snapRect.top) : (targetRect.bottom - snapRect.bottom);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java
--- a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java	(date 1632991320354)
@@ -20,7 +20,12 @@
 
     private final RecyclerView mRecyclerView;
     private static final float MILLISECONDS_PER_INCH = 100f;
-    private static final int MAX_SCROLL_ON_FLING_DURATION = 100; //ms
+    /**
+     * 要保证最小滑行时间，不然可能会出现划过再回退的情况
+     *
+     * @see #calculateTimeForScrolling(int)
+     */
+    private static final int MIN_SCROLL_ON_FLING_DURATION = 300; //ms
 
     PagerGridSmoothScroller(@NonNull RecyclerView recyclerView) {
         super(recyclerView.getContext());
@@ -75,8 +80,8 @@
     }
 
     @Override
-    protected int calculateTimeForScrolling(int dx) {
-        return Math.min(MAX_SCROLL_ON_FLING_DURATION, super.calculateTimeForScrolling(dx));
+    protected final int calculateTimeForScrolling(int dx) {
+        return Math.min(MIN_SCROLL_ON_FLING_DURATION, super.calculateTimeForScrolling(dx));
     }
 
     public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	(date 1632962724860)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1632962724860)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <targetSelectedWithDropDown>
+      <Target>
+        <type value="QUICK_BOOT_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="C:\Users\ShenBen\.android\avd\auto_register_API_22.avd" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </targetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2021-09-30T00:40:12.836129200Z" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/shencoder/demo/adapter/TestAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.demo.adapter;\r\n\r\n\r\nimport android.graphics.Color;\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.chad.library.adapter.base.BaseQuickAdapter;\r\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder;\r\nimport com.shencoder.demo.R;\r\nimport com.shencoder.demo.bean.TestBean;\r\nimport com.shencoder.pagergridlayoutmanager.PagerGridLayoutManager;\r\n\r\n\r\n/**\r\n * @author ShenBen\r\n * @date 2021/01/10 17:28\r\n * @email 714081644@qq.com\r\n */\r\npublic class TestAdapter extends BaseQuickAdapter<TestBean, BaseViewHolder> {\r\n    public static final String TAG = \"TestAdapter\";\r\n\r\n    public TestAdapter() {\r\n        super(R.layout.item_test);\r\n    }\r\n\r\n    @Override\r\n    protected void onItemViewHolderCreated(@NonNull BaseViewHolder viewHolder, int viewType) {\r\n        Log.i(TAG, \"onCreateViewHolder: \");\r\n    }\r\n\r\n    @Override\r\n    protected void convert(@NonNull BaseViewHolder holder, TestBean testBean) {\r\n        int position = holder.getLayoutPosition() - getHeaderLayoutCount();\r\n        Log.i(TAG, \"onBindViewHolder-position: \" + position);\r\n//        RecyclerView.LayoutManager layoutManager = getRecyclerView().getLayoutManager();\r\n//        if (layoutManager instanceof PagerGridLayoutManager) {\r\n//            int onePageSize = ((PagerGridLayoutManager) layoutManager).getOnePageSize();\r\n//            if (position % onePageSize == 0) {\r\n//                holder.setTextColor(R.id.tvItem, Color.RED);\r\n//            } else if (position % onePageSize == onePageSize - 1) {\r\n//                holder.setTextColor(R.id.tvItem, Color.GREEN);\r\n//            } else {\r\n//                holder.setTextColor(R.id.tvItem, Color.WHITE);\r\n//            }\r\n//        } else {\r\n//            holder.setTextColor(R.id.tvItem, Color.WHITE);\r\n//        }\r\n        holder.setTextColor(R.id.tvItem, Color.WHITE);\r\n        holder.setText(R.id.tvItem, testBean.getName());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/shencoder/demo/adapter/TestAdapter.java b/app/src/main/java/com/shencoder/demo/adapter/TestAdapter.java
--- a/app/src/main/java/com/shencoder/demo/adapter/TestAdapter.java	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/app/src/main/java/com/shencoder/demo/adapter/TestAdapter.java	(date 1632984456203)
@@ -13,6 +13,9 @@
 import com.shencoder.demo.bean.TestBean;
 import com.shencoder.pagergridlayoutmanager.PagerGridLayoutManager;
 
+import java.util.Arrays;
+import java.util.List;
+
 
 /**
  * @author ShenBen
@@ -31,6 +34,14 @@
         Log.i(TAG, "onCreateViewHolder: ");
     }
 
+    @Override
+    protected void convert(@NonNull BaseViewHolder holder, TestBean item, @NonNull List<?> payloads) {
+        int position = holder.getLayoutPosition() - getHeaderLayoutCount();
+        Log.i(TAG, "onBindViewHolder-position: " + position + ",payloads: " + Arrays.toString(payloads.toArray()));
+        holder.setTextColor(R.id.tvItem, Color.WHITE);
+        holder.setText(R.id.tvItem, item.getName());
+    }
+
     @Override
     protected void convert(@NonNull BaseViewHolder holder, TestBean testBean) {
         int position = holder.getLayoutPosition() - getHeaderLayoutCount();
Index: app/src/main/java/com/shencoder/demo/activity/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.demo.activity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Rect;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.shencoder.demo.R;\r\nimport com.shencoder.demo.adapter.TestAdapter;\r\nimport com.shencoder.demo.bean.TestBean;\r\nimport com.shencoder.pagergridlayoutmanager.PagerGridLayoutManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    public static final String TAG = \"MainActivity\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        RadioGroup rgOrientation = findViewById(R.id.rgOrientation);\r\n        RadioButton rbHorizontal = findViewById(R.id.rbHorizontal);\r\n        RadioButton rbVertical = findViewById(R.id.rbVertical);\r\n        EditText etRows = findViewById(R.id.etRows);\r\n        EditText etColumns = findViewById(R.id.etColumns);\r\n        EditText etPosition = findViewById(R.id.etPosition);\r\n        EditText etPagerIndex = findViewById(R.id.etPagerIndex);\r\n\r\n\r\n        findViewById(R.id.btnVp1).setOnClickListener(v -> {\r\n            startActivity(new Intent(this, ViewPagerActivity.class));\r\n        });\r\n        findViewById(R.id.btnVp2).setOnClickListener(v -> {\r\n            startActivity(new Intent(this, ViewPager2Activity.class));\r\n        });\r\n        RecyclerView rv = findViewById(R.id.rv);\r\n        rv.addItemDecoration(new RecyclerView.ItemDecoration() {\r\n            @Override\r\n            public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {\r\n                outRect.set(10, 10, 10, 10);\r\n            }\r\n        });\r\n        TextView tvPagerIndex = findViewById(R.id.tvPagerIndex);\r\n        TextView tvPagerCount = findViewById(R.id.tvPagerCount);\r\n        final PagerGridLayoutManager layoutManager = new PagerGridLayoutManager(\r\n                Integer.parseInt(etRows.getText().toString()),\r\n                Integer.parseInt(etColumns.getText().toString()),\r\n                rbHorizontal.isChecked() ? PagerGridLayoutManager.HORIZONTAL : PagerGridLayoutManager.VERTICAL);\r\n        layoutManager.setPagerChangedListener(new PagerGridLayoutManager.PagerChangedListener() {\r\n            @Override\r\n            public void onPagerCountChanged(int pagerCount) {\r\n                Log.w(TAG, \"onPagerCountChanged-pagerCount:\" + pagerCount);\r\n                tvPagerCount.setText(String.valueOf(pagerCount));\r\n            }\r\n\r\n            @Override\r\n            public void onPagerIndexSelected(int prePagerIndex, int currentPagerIndex) {\r\n                tvPagerIndex.setText(currentPagerIndex == PagerGridLayoutManager.NO_ITEM ? \"-\" : String.valueOf(currentPagerIndex + 1));\r\n                Log.w(TAG, \"onPagerIndexSelected-prePagerIndex \" + prePagerIndex + \",currentPagerIndex:\" + currentPagerIndex);\r\n            }\r\n        });\r\n        rv.setLayoutManager(layoutManager);\r\n        TestAdapter adapter = new TestAdapter();\r\n        rv.setAdapter(adapter);\r\n        adapter.setOnItemClickListener((adapter1, view1, position) -> {\r\n            Toast.makeText(this, \"点击了位置：\" + position, Toast.LENGTH_SHORT).show();\r\n        });\r\n        //长按删除数据\r\n        adapter.setOnItemLongClickListener((adapter12, view12, position) -> {\r\n            Toast.makeText(this, \"删除了位置：\" + position, Toast.LENGTH_SHORT).show();\r\n            adapter12.removeAt(position);\r\n            return true;\r\n        });\r\n        findViewById(R.id.btnSetRows).setOnClickListener(v -> {\r\n            String string = etRows.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"行数不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.setRows(Integer.parseInt(string));\r\n        });\r\n        rgOrientation.setOnCheckedChangeListener((group, checkedId) -> {\r\n            if (checkedId == R.id.rbHorizontal) {\r\n                layoutManager.setOrientation(PagerGridLayoutManager.HORIZONTAL);\r\n            } else if (checkedId == R.id.rbVertical) {\r\n                layoutManager.setOrientation(PagerGridLayoutManager.VERTICAL);\r\n            }\r\n        });\r\n        findViewById(R.id.btnSetColumns).setOnClickListener(v -> {\r\n            String string = etColumns.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"列数不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.setColumns(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnScrollToPosition).setOnClickListener(v -> {\r\n            String string = etPosition.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定位置不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            rv.scrollToPosition(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnSmoothScrollToPosition).setOnClickListener(v -> {\r\n            String string = etPosition.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定位置不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            rv.smoothScrollToPosition(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnScrollToPagerIndex).setOnClickListener(v -> {\r\n            String string = etPagerIndex.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定页不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.scrollToPagerIndex(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnSmoothScrollToPagerIndex).setOnClickListener(v -> {\r\n            String string = etPagerIndex.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(MainActivity.this, \"指定页不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.smoothScrollToPagerIndex(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnPrePager).setOnClickListener(v -> layoutManager.scrollToPrePager());\r\n        findViewById(R.id.btnNextPager).setOnClickListener(v -> layoutManager.scrollToNextPager());\r\n        findViewById(R.id.btnSmoothPrePager).setOnClickListener(v -> layoutManager.smoothScrollToPrePager());\r\n        findViewById(R.id.btnSmoothNextPager).setOnClickListener(v -> layoutManager.smoothScrollToNextPager());\r\n        findViewById(R.id.btnAddDataToStart).setOnClickListener(v -> adapter.addData(0, new TestBean(0, \"A\")));\r\n        findViewById(R.id.btnAddDataToEnd).setOnClickListener(v -> adapter.addData(new TestBean(0, \"Z\")));\r\n        findViewById(R.id.btnDeleteDataFromStart).setOnClickListener(v -> {\r\n            if (!adapter.getData().isEmpty()) {\r\n                adapter.removeAt(0);\r\n            }\r\n        });\r\n        findViewById(R.id.btnDeleteDataFromEnd).setOnClickListener(v -> {\r\n            if (!adapter.getData().isEmpty()) {\r\n                adapter.removeAt(adapter.getData().size() - 1);\r\n            }\r\n        });\r\n\r\n        List<TestBean> list = new ArrayList<>();\r\n        for (int i = 0; i < 1500; i++) {\r\n            list.add(new TestBean(i, String.valueOf(i)));\r\n        }\r\n        adapter.setList(list);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/shencoder/demo/activity/MainActivity.java b/app/src/main/java/com/shencoder/demo/activity/MainActivity.java
--- a/app/src/main/java/com/shencoder/demo/activity/MainActivity.java	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/app/src/main/java/com/shencoder/demo/activity/MainActivity.java	(date 1632992290621)
@@ -2,6 +2,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import android.content.Intent;
@@ -11,6 +12,7 @@
 import android.util.Log;
 import android.view.View;
 import android.widget.EditText;
+import android.widget.LinearLayout;
 import android.widget.RadioButton;
 import android.widget.RadioGroup;
 import android.widget.TextView;
@@ -155,9 +157,16 @@
                 adapter.removeAt(adapter.getData().size() - 1);
             }
         });
+        findViewById(R.id.btnUpdateFirstData).setOnClickListener(v -> {
+            if (!adapter.getData().isEmpty()) {
+                adapter.getItem(0).setName("我更新了");
+                adapter.notifyItemChanged(0);
+            }
+//            adapter.notifyItemRangeChanged(0, 5);
+        });
 
         List<TestBean> list = new ArrayList<>();
-        for (int i = 0; i < 1500; i++) {
+        for (int i = 0; i < 26; i++) {
             list.add(new TestBean(i, String.valueOf(i)));
         }
         adapter.setList(list);
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.20833333333333334\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/drawable/ic_launcher_background.xml\" value=\"0.20833333333333334\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/activity_main.xml\" value=\"0.11727456940222898\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/activity_view_pager.xml\" value=\"0.11727456940222898\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_empty.xml\" value=\"0.11727456940222898\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_test.xml\" value=\"0.11727456940222898\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_view_pager.xml\" value=\"0.11727456940222898\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_view_pager2.xml\" value=\"0.2\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/item_test.xml\" value=\"0.24114583333333334\" />\r\n        <entry key=\"..\\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\" value=\"0.20833333333333334\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"FindBugsConfigurable\">\r\n    <option name=\"make\" value=\"true\" />\r\n    <option name=\"effort\" value=\"default\" />\r\n    <option name=\"priority\" value=\"Medium\" />\r\n    <option name=\"excludeFilter\" value=\"\" />\r\n  </component>\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"org.jetbrains.annotations.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"androidx.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"15\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"android.annotation.Nullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.Nullable\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.Nullable\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.Nullable\" />\r\n          <item index=\"14\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.Nullable\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"15\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"android.annotation.NonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.NonNull\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.NonNull\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.NonNull\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.NonNull\" />\r\n          <item index=\"14\" class=\"java.lang.String\" itemvalue=\"lombok.NonNull\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"SuppressionsComponent\">\r\n    <option name=\"suppComments\" value=\"[]\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/.idea/misc.xml	(date 1632982776574)
@@ -5,7 +5,7 @@
       <map>
         <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/drawable-v24/ic_launcher_foreground.xml" value="0.20833333333333334" />
         <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/drawable/ic_launcher_background.xml" value="0.20833333333333334" />
-        <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/activity_main.xml" value="0.11727456940222898" />
+        <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/activity_main.xml" value="0.2" />
         <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/activity_view_pager.xml" value="0.11727456940222898" />
         <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_empty.xml" value="0.11727456940222898" />
         <entry key="..\:/Work/Android/AndroidStudioProjects/PagerGridLayoutManager/app/src/main/res/layout/fragment_test.xml" value="0.11727456940222898" />
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:focusable=\"true\"\r\n    android:focusableInTouchMode=\"true\"\r\n    tools:context=\".activity.MainActivity\">\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/guideline\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintGuide_percent=\"0.4\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rv\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/guideline\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvPagerIndex\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"15dp\"\r\n        android:text=\"-\"\r\n        android:textSize=\"20sp\"\r\n        android:textStyle=\"bold\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/tv_\"\r\n        app:layout_constraintHorizontal_chainStyle=\"packed\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/rv\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"/\"\r\n        android:textSize=\"20sp\"\r\n        android:textStyle=\"bold\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/tvPagerIndex\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/tvPagerCount\"\r\n        app:layout_constraintStart_toEndOf=\"@id/tvPagerIndex\"\r\n        app:layout_constraintTop_toTopOf=\"@id/tvPagerIndex\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvPagerCount\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"-\"\r\n        android:textSize=\"20sp\"\r\n        android:textStyle=\"bold\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/tvPagerIndex\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@id/tv_\"\r\n        app:layout_constraintTop_toTopOf=\"@id/tvPagerIndex\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvOrientation\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"滑动方向：\"\r\n        android:textColor=\"@android:color/black\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvPagerIndex\" />\r\n\r\n    <RadioGroup\r\n        android:id=\"@+id/rgOrientation\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/tvOrientation\"\r\n        app:layout_constraintStart_toEndOf=\"@id/tvOrientation\"\r\n        app:layout_constraintTop_toTopOf=\"@id/tvOrientation\">\r\n\r\n        <RadioButton\r\n            android:id=\"@+id/rbHorizontal\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:checked=\"true\"\r\n            android:text=\"HORIZONTAL\" />\r\n\r\n        <RadioButton\r\n            android:id=\"@+id/rbVertical\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"VERTICAL\" />\r\n    </RadioGroup>\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvHint2\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"注意：水平和垂直排列方式不一致。\"\r\n        android:textColor=\"@android:color/holo_red_dark\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvOrientation\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/etRows\"\r\n        android:layout_width=\"50dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"行数\"\r\n        android:inputType=\"number\"\r\n        android:singleLine=\"true\"\r\n        android:text=\"3\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvHint2\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSetRows\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"设置行数\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etRows\"\r\n        app:layout_constraintStart_toEndOf=\"@id/etRows\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etRows\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/etColumns\"\r\n        android:layout_width=\"50dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"15dp\"\r\n        android:hint=\"列数\"\r\n        android:inputType=\"number\"\r\n        android:singleLine=\"true\"\r\n        android:text=\"3\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etRows\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnSetRows\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etRows\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSetColumns\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"设置列数\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etRows\"\r\n        app:layout_constraintStart_toEndOf=\"@id/etColumns\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etRows\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/etPosition\"\r\n        android:layout_width=\"110dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"滚动的位置\"\r\n        android:inputType=\"number\"\r\n        android:singleLine=\"true\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/etRows\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnScrollToPosition\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"直接滚动到指定位置\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etPosition\"\r\n        app:layout_constraintStart_toEndOf=\"@id/etPosition\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etPosition\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSmoothScrollToPosition\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"平滑滚动到指定位置\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etPosition\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnScrollToPosition\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etPosition\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvHint\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"注意：滚动到的是指定位置对应的页\"\r\n        android:textColor=\"@android:color/holo_red_dark\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/etPosition\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/etPagerIndex\"\r\n        android:layout_width=\"130dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:hint=\"滚动的页下标\"\r\n        android:inputType=\"number\"\r\n        android:singleLine=\"true\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvHint\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnScrollToPagerIndex\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"直接滚动到指定页\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etPagerIndex\"\r\n        app:layout_constraintStart_toEndOf=\"@id/etPagerIndex\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etPagerIndex\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSmoothScrollToPagerIndex\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"平滑滚动到指定页\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/etPagerIndex\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnScrollToPagerIndex\"\r\n        app:layout_constraintTop_toTopOf=\"@id/etPagerIndex\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvHint1\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"注意平滑滚动：如果滚动的页与当前页超过3，避免长时间滚动，会先直接滚动到就近的附近，再做平滑滚动\"\r\n        android:textColor=\"@android:color/holo_red_dark\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/etPagerIndex\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnPrePager\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"直接滚动到上一页\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvHint1\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnNextPager\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"直接滚动到下一页\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnPrePager\"\r\n        app:layout_constraintTop_toTopOf=\"@id/btnPrePager\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSmoothPrePager\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"平滑滚动到上一页\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/btnPrePager\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnSmoothNextPager\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"平滑滚动到下一页\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnSmoothPrePager\"\r\n        app:layout_constraintTop_toTopOf=\"@id/btnSmoothPrePager\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnAddDataToStart\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"向头部插入一条数据\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/btnSmoothPrePager\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnAddDataToEnd\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"向尾部插入一条数据\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/btnAddDataToStart\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnAddDataToStart\"\r\n        app:layout_constraintTop_toTopOf=\"@id/btnAddDataToStart\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnDeleteDataFromStart\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"从头部删除一条数据\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/btnAddDataToStart\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnDeleteDataFromEnd\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"从尾部删除一条数据\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/btnDeleteDataFromStart\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnDeleteDataFromStart\"\r\n        app:layout_constraintTop_toTopOf=\"@id/btnDeleteDataFromStart\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnVp1\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_marginBottom=\"20dp\"\r\n        android:text=\"跳转到ViewPager\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/btnVp2\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/btnVp2\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:text=\"跳转到ViewPager2\"\r\n        app:layout_constraintBottom_toBottomOf=\"@id/btnVp1\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@id/btnVp1\"\r\n        app:layout_constraintTop_toTopOf=\"@id/btnVp1\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	(revision fc8de7c61d5e0826498afaad95f9bef274304658)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1632991320361)
@@ -1,309 +1,316 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:focusable="true"
     android:focusableInTouchMode="true"
+    android:orientation="vertical"
     tools:context=".activity.MainActivity">
 
-    <androidx.constraintlayout.widget.Guideline
-        android:id="@+id/guideline"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        app:layout_constraintGuide_percent="0.4" />
 
     <androidx.recyclerview.widget.RecyclerView
         android:id="@+id/rv"
         android:layout_width="match_parent"
-        android:layout_height="0dp"
-        app:layout_constraintBottom_toBottomOf="@id/guideline"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        android:layout_height="260dp" />
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        android:gravity="center"
+        android:orientation="horizontal">
 
-    <TextView
-        android:id="@+id/tvPagerIndex"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginTop="15dp"
-        android:text="-"
-        android:textSize="20sp"
-        android:textStyle="bold"
-        app:layout_constraintEnd_toStartOf="@id/tv_"
-        app:layout_constraintHorizontal_chainStyle="packed"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/rv" />
+        <TextView
+            android:id="@+id/tvPagerIndex"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="-"
+            android:textSize="20sp"
+            android:textStyle="bold" />
 
-    <TextView
-        android:id="@+id/tv_"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="/"
-        android:textSize="20sp"
-        android:textStyle="bold"
-        app:layout_constraintBottom_toBottomOf="@id/tvPagerIndex"
-        app:layout_constraintEnd_toStartOf="@id/tvPagerCount"
-        app:layout_constraintStart_toEndOf="@id/tvPagerIndex"
-        app:layout_constraintTop_toTopOf="@id/tvPagerIndex" />
+        <TextView
+            android:id="@+id/tv_"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="/"
+            android:textSize="20sp"
+            android:textStyle="bold" />
 
-    <TextView
-        android:id="@+id/tvPagerCount"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="-"
-        android:textSize="20sp"
-        android:textStyle="bold"
-        app:layout_constraintBottom_toBottomOf="@id/tvPagerIndex"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toEndOf="@id/tv_"
-        app:layout_constraintTop_toTopOf="@id/tvPagerIndex" />
+        <TextView
+            android:id="@+id/tvPagerCount"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="-"
+            android:textSize="20sp"
+            android:textStyle="bold" />
+
+    </LinearLayout>
+
+    <androidx.core.widget.NestedScrollView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
 
-    <TextView
-        android:id="@+id/tvOrientation"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="滑动方向："
-        android:textColor="@android:color/black"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvPagerIndex" />
+            <TextView
+                android:id="@+id/tvOrientation"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="滑动方向："
+                android:textColor="@android:color/black"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent" />
 
-    <RadioGroup
-        android:id="@+id/rgOrientation"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        app:layout_constraintBottom_toBottomOf="@id/tvOrientation"
-        app:layout_constraintStart_toEndOf="@id/tvOrientation"
-        app:layout_constraintTop_toTopOf="@id/tvOrientation">
+            <RadioGroup
+                android:id="@+id/rgOrientation"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                app:layout_constraintBottom_toBottomOf="@id/tvOrientation"
+                app:layout_constraintStart_toEndOf="@id/tvOrientation"
+                app:layout_constraintTop_toTopOf="@id/tvOrientation">
 
-        <RadioButton
-            android:id="@+id/rbHorizontal"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:checked="true"
-            android:text="HORIZONTAL" />
+                <RadioButton
+                    android:id="@+id/rbHorizontal"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:checked="true"
+                    android:text="HORIZONTAL" />
 
-        <RadioButton
-            android:id="@+id/rbVertical"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="VERTICAL" />
-    </RadioGroup>
+                <RadioButton
+                    android:id="@+id/rbVertical"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="VERTICAL" />
+            </RadioGroup>
 
-    <TextView
-        android:id="@+id/tvHint2"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="注意：水平和垂直排列方式不一致。"
-        android:textColor="@android:color/holo_red_dark"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvOrientation" />
+            <TextView
+                android:id="@+id/tvHint2"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="注意：水平和垂直排列顺序不一致。"
+                android:textColor="@android:color/holo_red_dark"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/tvOrientation" />
 
-    <EditText
-        android:id="@+id/etRows"
-        android:layout_width="50dp"
-        android:layout_height="wrap_content"
-        android:hint="行数"
-        android:inputType="number"
-        android:singleLine="true"
-        android:text="3"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvHint2" />
+            <EditText
+                android:id="@+id/etRows"
+                android:layout_width="50dp"
+                android:layout_height="wrap_content"
+                android:hint="行数"
+                android:inputType="number"
+                android:singleLine="true"
+                android:text="3"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/tvHint2" />
 
-    <Button
-        android:id="@+id/btnSetRows"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="设置行数"
-        app:layout_constraintBottom_toBottomOf="@id/etRows"
-        app:layout_constraintStart_toEndOf="@id/etRows"
-        app:layout_constraintTop_toTopOf="@id/etRows" />
+            <Button
+                android:id="@+id/btnSetRows"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="设置行数"
+                app:layout_constraintBottom_toBottomOf="@id/etRows"
+                app:layout_constraintStart_toEndOf="@id/etRows"
+                app:layout_constraintTop_toTopOf="@id/etRows" />
 
-    <EditText
-        android:id="@+id/etColumns"
-        android:layout_width="50dp"
-        android:layout_height="wrap_content"
-        android:layout_marginStart="15dp"
-        android:hint="列数"
-        android:inputType="number"
-        android:singleLine="true"
-        android:text="3"
-        app:layout_constraintBottom_toBottomOf="@id/etRows"
-        app:layout_constraintStart_toEndOf="@id/btnSetRows"
-        app:layout_constraintTop_toTopOf="@id/etRows" />
+            <EditText
+                android:id="@+id/etColumns"
+                android:layout_width="50dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="15dp"
+                android:hint="列数"
+                android:inputType="number"
+                android:singleLine="true"
+                android:text="3"
+                app:layout_constraintBottom_toBottomOf="@id/etRows"
+                app:layout_constraintStart_toEndOf="@id/btnSetRows"
+                app:layout_constraintTop_toTopOf="@id/etRows" />
 
-    <Button
-        android:id="@+id/btnSetColumns"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="设置列数"
-        app:layout_constraintBottom_toBottomOf="@id/etRows"
-        app:layout_constraintStart_toEndOf="@id/etColumns"
-        app:layout_constraintTop_toTopOf="@id/etRows" />
+            <Button
+                android:id="@+id/btnSetColumns"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="设置列数"
+                app:layout_constraintBottom_toBottomOf="@id/etRows"
+                app:layout_constraintStart_toEndOf="@id/etColumns"
+                app:layout_constraintTop_toTopOf="@id/etRows" />
 
-    <EditText
-        android:id="@+id/etPosition"
-        android:layout_width="110dp"
-        android:layout_height="wrap_content"
-        android:hint="滚动的位置"
-        android:inputType="number"
-        android:singleLine="true"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/etRows" />
+            <EditText
+                android:id="@+id/etPosition"
+                android:layout_width="110dp"
+                android:layout_height="wrap_content"
+                android:hint="滚动的位置"
+                android:inputType="number"
+                android:singleLine="true"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/etRows" />
 
-    <Button
-        android:id="@+id/btnScrollToPosition"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="直接滚动到指定位置"
-        app:layout_constraintBottom_toBottomOf="@id/etPosition"
-        app:layout_constraintStart_toEndOf="@id/etPosition"
-        app:layout_constraintTop_toTopOf="@id/etPosition" />
+            <Button
+                android:id="@+id/btnScrollToPosition"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="直接滚动到指定位置"
+                app:layout_constraintBottom_toBottomOf="@id/etPosition"
+                app:layout_constraintStart_toEndOf="@id/etPosition"
+                app:layout_constraintTop_toTopOf="@id/etPosition" />
 
-    <Button
-        android:id="@+id/btnSmoothScrollToPosition"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="平滑滚动到指定位置"
-        app:layout_constraintBottom_toBottomOf="@id/etPosition"
-        app:layout_constraintStart_toEndOf="@id/btnScrollToPosition"
-        app:layout_constraintTop_toTopOf="@id/etPosition" />
+            <Button
+                android:id="@+id/btnSmoothScrollToPosition"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="平滑滚动到指定位置"
+                app:layout_constraintBottom_toBottomOf="@id/etPosition"
+                app:layout_constraintStart_toEndOf="@id/btnScrollToPosition"
+                app:layout_constraintTop_toTopOf="@id/etPosition" />
 
-    <TextView
-        android:id="@+id/tvHint"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="注意：滚动到的是指定位置对应的页"
-        android:textColor="@android:color/holo_red_dark"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/etPosition" />
+            <TextView
+                android:id="@+id/tvHint"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="注意：滚动到的是指定位置对应的页"
+                android:textColor="@android:color/holo_red_dark"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/etPosition" />
 
-    <EditText
-        android:id="@+id/etPagerIndex"
-        android:layout_width="130dp"
-        android:layout_height="wrap_content"
-        android:hint="滚动的页下标"
-        android:inputType="number"
-        android:singleLine="true"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvHint" />
+            <EditText
+                android:id="@+id/etPagerIndex"
+                android:layout_width="130dp"
+                android:layout_height="wrap_content"
+                android:hint="滚动的页下标"
+                android:inputType="number"
+                android:singleLine="true"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/tvHint" />
 
-    <Button
-        android:id="@+id/btnScrollToPagerIndex"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="直接滚动到指定页"
-        app:layout_constraintBottom_toBottomOf="@id/etPagerIndex"
-        app:layout_constraintStart_toEndOf="@id/etPagerIndex"
-        app:layout_constraintTop_toTopOf="@id/etPagerIndex" />
+            <Button
+                android:id="@+id/btnScrollToPagerIndex"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="直接滚动到指定页"
+                app:layout_constraintBottom_toBottomOf="@id/etPagerIndex"
+                app:layout_constraintStart_toEndOf="@id/etPagerIndex"
+                app:layout_constraintTop_toTopOf="@id/etPagerIndex" />
 
-    <Button
-        android:id="@+id/btnSmoothScrollToPagerIndex"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="平滑滚动到指定页"
-        app:layout_constraintBottom_toBottomOf="@id/etPagerIndex"
-        app:layout_constraintStart_toEndOf="@id/btnScrollToPagerIndex"
-        app:layout_constraintTop_toTopOf="@id/etPagerIndex" />
+            <Button
+                android:id="@+id/btnSmoothScrollToPagerIndex"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="平滑滚动到指定页"
+                app:layout_constraintBottom_toBottomOf="@id/etPagerIndex"
+                app:layout_constraintStart_toEndOf="@id/btnScrollToPagerIndex"
+                app:layout_constraintTop_toTopOf="@id/etPagerIndex" />
 
-    <TextView
-        android:id="@+id/tvHint1"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="注意平滑滚动：如果滚动的页与当前页超过3，避免长时间滚动，会先直接滚动到就近的附近，再做平滑滚动"
-        android:textColor="@android:color/holo_red_dark"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/etPagerIndex" />
+            <TextView
+                android:id="@+id/tvHint1"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="注意平滑滚动：如果滚动的页与当前页超过3，避免长时间滚动，会先直接滚动到就近的附近，再做平滑滚动"
+                android:textColor="@android:color/holo_red_dark"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/etPagerIndex" />
 
-    <Button
-        android:id="@+id/btnPrePager"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="直接滚动到上一页"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvHint1" />
+            <Button
+                android:id="@+id/btnPrePager"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="直接滚动到上一页"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/tvHint1" />
 
-    <Button
-        android:id="@+id/btnNextPager"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="直接滚动到下一页"
-        app:layout_constraintStart_toEndOf="@id/btnPrePager"
-        app:layout_constraintTop_toTopOf="@id/btnPrePager" />
+            <Button
+                android:id="@+id/btnNextPager"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="直接滚动到下一页"
+                app:layout_constraintStart_toEndOf="@id/btnPrePager"
+                app:layout_constraintTop_toTopOf="@id/btnPrePager" />
 
-    <Button
-        android:id="@+id/btnSmoothPrePager"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="平滑滚动到上一页"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/btnPrePager" />
+            <Button
+                android:id="@+id/btnSmoothPrePager"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="平滑滚动到上一页"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/btnPrePager" />
 
-    <Button
-        android:id="@+id/btnSmoothNextPager"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="平滑滚动到下一页"
-        app:layout_constraintStart_toEndOf="@id/btnSmoothPrePager"
-        app:layout_constraintTop_toTopOf="@id/btnSmoothPrePager" />
+            <Button
+                android:id="@+id/btnSmoothNextPager"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="平滑滚动到下一页"
+                app:layout_constraintStart_toEndOf="@id/btnSmoothPrePager"
+                app:layout_constraintTop_toTopOf="@id/btnSmoothPrePager" />
 
-    <Button
-        android:id="@+id/btnAddDataToStart"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="向头部插入一条数据"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/btnSmoothPrePager" />
+            <Button
+                android:id="@+id/btnAddDataToStart"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="向头部插入一条数据"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/btnSmoothPrePager" />
 
-    <Button
-        android:id="@+id/btnAddDataToEnd"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="向尾部插入一条数据"
-        app:layout_constraintBottom_toBottomOf="@id/btnAddDataToStart"
-        app:layout_constraintStart_toEndOf="@id/btnAddDataToStart"
-        app:layout_constraintTop_toTopOf="@id/btnAddDataToStart" />
+            <Button
+                android:id="@+id/btnAddDataToEnd"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="向尾部插入一条数据"
+                app:layout_constraintBottom_toBottomOf="@id/btnAddDataToStart"
+                app:layout_constraintStart_toEndOf="@id/btnAddDataToStart"
+                app:layout_constraintTop_toTopOf="@id/btnAddDataToStart" />
 
-    <Button
-        android:id="@+id/btnDeleteDataFromStart"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="从头部删除一条数据"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/btnAddDataToStart" />
+            <Button
+                android:id="@+id/btnDeleteDataFromStart"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="从头部删除一条数据"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/btnAddDataToStart" />
 
-    <Button
-        android:id="@+id/btnDeleteDataFromEnd"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="从尾部删除一条数据"
-        app:layout_constraintBottom_toBottomOf="@id/btnDeleteDataFromStart"
-        app:layout_constraintStart_toEndOf="@id/btnDeleteDataFromStart"
-        app:layout_constraintTop_toTopOf="@id/btnDeleteDataFromStart" />
+            <Button
+                android:id="@+id/btnDeleteDataFromEnd"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="从尾部删除一条数据"
+                app:layout_constraintBottom_toBottomOf="@id/btnDeleteDataFromStart"
+                app:layout_constraintStart_toEndOf="@id/btnDeleteDataFromStart"
+                app:layout_constraintTop_toTopOf="@id/btnDeleteDataFromStart" />
 
-    <Button
-        android:id="@+id/btnVp1"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
-        android:layout_marginBottom="20dp"
-        android:text="跳转到ViewPager"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toStartOf="@id/btnVp2"
-        app:layout_constraintStart_toStartOf="parent" />
+            <Button
+                android:id="@+id/btnUpdateFirstData"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="更新第一条数据"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/btnDeleteDataFromStart" />
+
+            <Button
+                android:id="@+id/btnVp1"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:layout_marginTop="20dp"
+                android:text="跳转到ViewPager"
+                app:layout_constraintEnd_toStartOf="@id/btnVp2"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/btnUpdateFirstData" />
 
-    <Button
-        android:id="@+id/btnVp2"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
-        android:text="跳转到ViewPager2"
-        app:layout_constraintBottom_toBottomOf="@id/btnVp1"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toEndOf="@id/btnVp1"
-        app:layout_constraintTop_toTopOf="@id/btnVp1" />
+            <Button
+                android:id="@+id/btnVp2"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:text="跳转到ViewPager2"
+                app:layout_constraintBottom_toBottomOf="@id/btnVp1"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toEndOf="@id/btnVp1"
+                app:layout_constraintTop_toTopOf="@id/btnVp1" />
 
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
+        </androidx.constraintlayout.widget.ConstraintLayout>
+    </androidx.core.widget.NestedScrollView>
+
+</LinearLayout>
\ No newline at end of file

Index: pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.pagergridlayoutmanager;\r\n\r\nimport android.graphics.PointF;\r\nimport android.graphics.Rect;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.LinearSmoothScroller;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\n/**\r\n * @author ShenBen\r\n * @date 2021/02/18 11:40\r\n * @email 714081644@qq.com\r\n */\r\nclass PagerGridSmoothScroller extends LinearSmoothScroller {\r\n    private static final String TAG = \"PagerGridSmoothScroller\";\r\n\r\n    private final RecyclerView mRecyclerView;\r\n    private static final float MILLISECONDS_PER_INCH = 100f;\r\n    /**\r\n     * 要保证最小滑行时间，不然可能会出现划过再回退的情况\r\n     *\r\n     * @see #calculateTimeForScrolling(int)\r\n     */\r\n    private static final int MIN_SCROLL_ON_FLING_DURATION = 300; //ms\r\n\r\n    PagerGridSmoothScroller(@NonNull RecyclerView recyclerView) {\r\n        super(recyclerView.getContext());\r\n        mRecyclerView = recyclerView;\r\n    }\r\n\r\n    /**\r\n     * 该方法会在targetSnapView被layout出来的时候调用。\r\n     *\r\n     * @param targetView targetSnapView\r\n     * @param state\r\n     * @param action\r\n     */\r\n    @Override\r\n    protected void onTargetFound(View targetView, RecyclerView.State state, Action action) {\r\n        RecyclerView.LayoutManager layoutManager = getLayoutManager();\r\n        if (layoutManager instanceof PagerGridLayoutManager) {\r\n            PagerGridLayoutManager manager = (PagerGridLayoutManager) layoutManager;\r\n\r\n            int targetPosition = manager.getPosition(targetView);\r\n\r\n            PointF pointF = computeScrollVectorForPosition(targetPosition);\r\n            if (pointF == null) {\r\n                //为null，则不处理\r\n                return;\r\n            }\r\n\r\n            boolean isLayoutToEnd = pointF.x > 0 || pointF.y > 0;\r\n            Rect snapRect;\r\n            if (isLayoutToEnd) {\r\n                snapRect = manager.getStartSnapRect();\r\n            } else {\r\n                snapRect = manager.getEndSnapRect();\r\n            }\r\n            Rect targetRect = new Rect();\r\n            layoutManager.getDecoratedBoundsWithMargins(targetView, targetRect);\r\n            int dx = calculateDx(manager, snapRect, targetRect, isLayoutToEnd);\r\n            int dy = calculateDy(manager, snapRect, targetRect, isLayoutToEnd);\r\n            final int time = calculateTimeForDeceleration(Math.max(Math.abs(dx), Math.abs(dy)));\r\n            if (PagerGridLayoutManager.DEBUG) {\r\n                Log.i(TAG, \"onTargetFound-targetPosition:\" + targetPosition + \", dx:\" + dx + \",dy:\" + dy + \",time:\" + time + \",snapRect:\" + snapRect + \",targetRect:\" + targetRect);\r\n            }\r\n            if (time > 0) {\r\n                action.update(dx, dy, time, mDecelerateInterpolator);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {\r\n        return MILLISECONDS_PER_INCH / displayMetrics.densityDpi;\r\n    }\r\n\r\n    @Override\r\n    protected final int calculateTimeForScrolling(int dx) {\r\n        return Math.min(MIN_SCROLL_ON_FLING_DURATION, super.calculateTimeForScrolling(dx));\r\n    }\r\n\r\n    public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {\r\n        if (!manager.canScrollHorizontally()) {\r\n            return 0;\r\n        }\r\n        return targetRect.left - snapRect.left;\r\n    }\r\n\r\n    public static int calculateDy(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {\r\n        if (!manager.canScrollVertically()) {\r\n            return 0;\r\n        }\r\n        return targetRect.top - snapRect.top;\r\n    }\r\n\r\n    public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect, boolean isLayoutToEnd) {\r\n        if (!manager.canScrollHorizontally()) {\r\n            return 0;\r\n        }\r\n        return isLayoutToEnd ? (targetRect.left - snapRect.left) : (targetRect.right - snapRect.right);\r\n    }\r\n\r\n    public static int calculateDy(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect, boolean isLayoutToEnd) {\r\n        if (!manager.canScrollVertically()) {\r\n            return 0;\r\n        }\r\n        return isLayoutToEnd ? (targetRect.top - snapRect.top) : (targetRect.bottom - snapRect.bottom);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java
--- a/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java	
+++ b/pagergridlayoutmanager/src/main/java/com/shencoder/pagergridlayoutmanager/PagerGridSmoothScroller.java	
@@ -19,13 +19,13 @@
     private static final String TAG = "PagerGridSmoothScroller";
 
     private final RecyclerView mRecyclerView;
-    private static final float MILLISECONDS_PER_INCH = 100f;
+    private static final float MILLISECONDS_PER_INCH = 50f;
     /**
      * 要保证最小滑行时间，不然可能会出现划过再回退的情况
      *
      * @see #calculateTimeForScrolling(int)
      */
-    private static final int MIN_SCROLL_ON_FLING_DURATION = 300; //ms
+    private static final int MIN_SCROLL_ON_FLING_DURATION = 200; //ms
 
     PagerGridSmoothScroller(@NonNull RecyclerView recyclerView) {
         super(recyclerView.getContext());
@@ -81,7 +81,11 @@
 
     @Override
     protected final int calculateTimeForScrolling(int dx) {
-        return Math.min(MIN_SCROLL_ON_FLING_DURATION, super.calculateTimeForScrolling(dx));
+        int calculateTimeForScrolling = super.calculateTimeForScrolling(dx);
+        if (PagerGridLayoutManager.DEBUG) {
+            Log.d(TAG, "super.calculateTimeForScrolling: " + calculateTimeForScrolling);
+        }
+        return Math.min(MIN_SCROLL_ON_FLING_DURATION, calculateTimeForScrolling);
     }
 
     public static int calculateDx(PagerGridLayoutManager manager, Rect snapRect, Rect targetRect) {
Index: app/src/main/java/com/shencoder/demo/activity/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shencoder.demo.activity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Rect;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.shencoder.demo.BuildConfig;\r\nimport com.shencoder.demo.R;\r\nimport com.shencoder.demo.adapter.TestAdapter;\r\nimport com.shencoder.demo.bean.TestBean;\r\nimport com.shencoder.pagergridlayoutmanager.PagerGridLayoutManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    public static final String TAG = \"MainActivity\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        RadioGroup rgOrientation = findViewById(R.id.rgOrientation);\r\n        RadioButton rbHorizontal = findViewById(R.id.rbHorizontal);\r\n        RadioButton rbVertical = findViewById(R.id.rbVertical);\r\n        EditText etRows = findViewById(R.id.etRows);\r\n        EditText etColumns = findViewById(R.id.etColumns);\r\n        EditText etPosition = findViewById(R.id.etPosition);\r\n        EditText etPagerIndex = findViewById(R.id.etPagerIndex);\r\n\r\n        PagerGridLayoutManager.setDebug(BuildConfig.DEBUG);\r\n\r\n        findViewById(R.id.btnVp1).setOnClickListener(v -> {\r\n            startActivity(new Intent(this, ViewPagerActivity.class));\r\n        });\r\n        findViewById(R.id.btnVp2).setOnClickListener(v -> {\r\n            startActivity(new Intent(this, ViewPager2Activity.class));\r\n        });\r\n        RecyclerView rv = findViewById(R.id.rv);\r\n        rv.addItemDecoration(new RecyclerView.ItemDecoration() {\r\n            @Override\r\n            public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {\r\n                outRect.set(10, 10, 10, 10);\r\n            }\r\n        });\r\n        TextView tvPagerIndex = findViewById(R.id.tvPagerIndex);\r\n        TextView tvPagerCount = findViewById(R.id.tvPagerCount);\r\n        final PagerGridLayoutManager layoutManager = new PagerGridLayoutManager(\r\n                Integer.parseInt(etRows.getText().toString()),\r\n                Integer.parseInt(etColumns.getText().toString()),\r\n                rbHorizontal.isChecked() ? PagerGridLayoutManager.HORIZONTAL : PagerGridLayoutManager.VERTICAL);\r\n        layoutManager.setPagerChangedListener(new PagerGridLayoutManager.PagerChangedListener() {\r\n            @Override\r\n            public void onPagerCountChanged(int pagerCount) {\r\n                Log.w(TAG, \"onPagerCountChanged-pagerCount:\" + pagerCount);\r\n                tvPagerCount.setText(String.valueOf(pagerCount));\r\n            }\r\n\r\n            @Override\r\n            public void onPagerIndexSelected(int prePagerIndex, int currentPagerIndex) {\r\n                tvPagerIndex.setText(currentPagerIndex == PagerGridLayoutManager.NO_ITEM ? \"-\" : String.valueOf(currentPagerIndex + 1));\r\n                Log.w(TAG, \"onPagerIndexSelected-prePagerIndex \" + prePagerIndex + \",currentPagerIndex:\" + currentPagerIndex);\r\n            }\r\n        });\r\n        rv.setLayoutManager(layoutManager);\r\n        TestAdapter adapter = new TestAdapter();\r\n        rv.setAdapter(adapter);\r\n        adapter.setOnItemClickListener((adapter1, view1, position) -> {\r\n            Toast.makeText(this, \"点击了位置：\" + position, Toast.LENGTH_SHORT).show();\r\n        });\r\n        //长按删除数据\r\n        adapter.setOnItemLongClickListener((adapter12, view12, position) -> {\r\n            Toast.makeText(this, \"删除了位置：\" + position, Toast.LENGTH_SHORT).show();\r\n            adapter12.removeAt(position);\r\n            return true;\r\n        });\r\n        findViewById(R.id.btnSetRows).setOnClickListener(v -> {\r\n            String string = etRows.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"行数不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.setRows(Integer.parseInt(string));\r\n        });\r\n        rgOrientation.setOnCheckedChangeListener((group, checkedId) -> {\r\n            if (checkedId == R.id.rbHorizontal) {\r\n                layoutManager.setOrientation(PagerGridLayoutManager.HORIZONTAL);\r\n            } else if (checkedId == R.id.rbVertical) {\r\n                layoutManager.setOrientation(PagerGridLayoutManager.VERTICAL);\r\n            }\r\n        });\r\n        findViewById(R.id.btnSetColumns).setOnClickListener(v -> {\r\n            String string = etColumns.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"列数不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.setColumns(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnScrollToPosition).setOnClickListener(v -> {\r\n            String string = etPosition.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定位置不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            rv.scrollToPosition(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnSmoothScrollToPosition).setOnClickListener(v -> {\r\n            String string = etPosition.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定位置不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            rv.smoothScrollToPosition(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnScrollToPagerIndex).setOnClickListener(v -> {\r\n            String string = etPagerIndex.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(this, \"指定页不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.scrollToPagerIndex(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnSmoothScrollToPagerIndex).setOnClickListener(v -> {\r\n            String string = etPagerIndex.getText().toString();\r\n            if (TextUtils.isEmpty(string)) {\r\n                Toast.makeText(MainActivity.this, \"指定页不能为空\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            layoutManager.smoothScrollToPagerIndex(Integer.parseInt(string));\r\n        });\r\n        findViewById(R.id.btnPrePager).setOnClickListener(v -> layoutManager.scrollToPrePager());\r\n        findViewById(R.id.btnNextPager).setOnClickListener(v -> layoutManager.scrollToNextPager());\r\n        findViewById(R.id.btnSmoothPrePager).setOnClickListener(v -> layoutManager.smoothScrollToPrePager());\r\n        findViewById(R.id.btnSmoothNextPager).setOnClickListener(v -> layoutManager.smoothScrollToNextPager());\r\n        findViewById(R.id.btnAddDataToStart).setOnClickListener(v -> adapter.addData(0, new TestBean(0, \"A\")));\r\n        findViewById(R.id.btnAddDataToEnd).setOnClickListener(v -> adapter.addData(new TestBean(0, \"Z\")));\r\n        findViewById(R.id.btnDeleteDataFromStart).setOnClickListener(v -> {\r\n            if (!adapter.getData().isEmpty()) {\r\n                adapter.removeAt(0);\r\n            }\r\n        });\r\n        findViewById(R.id.btnDeleteDataFromEnd).setOnClickListener(v -> {\r\n            if (!adapter.getData().isEmpty()) {\r\n                adapter.removeAt(adapter.getData().size() - 1);\r\n            }\r\n        });\r\n        findViewById(R.id.btnUpdateFirstData).setOnClickListener(v -> {\r\n            if (!adapter.getData().isEmpty()) {\r\n                adapter.getItem(0).setName(\"我更新了\");\r\n                adapter.notifyItemChanged(0);\r\n            }\r\n//            adapter.notifyItemRangeChanged(0, 5);\r\n        });\r\n\r\n        List<TestBean> list = new ArrayList<>();\r\n        for (int i = 0; i < 26; i++) {\r\n            list.add(new TestBean(i, String.valueOf(i)));\r\n        }\r\n        adapter.setList(list);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/shencoder/demo/activity/MainActivity.java b/app/src/main/java/com/shencoder/demo/activity/MainActivity.java
--- a/app/src/main/java/com/shencoder/demo/activity/MainActivity.java	
+++ b/app/src/main/java/com/shencoder/demo/activity/MainActivity.java	
@@ -166,7 +166,7 @@
         });
 
         List<TestBean> list = new ArrayList<>();
-        for (int i = 0; i < 26; i++) {
+        for (int i = 0; i < 1000; i++) {
             list.add(new TestBean(i, String.valueOf(i)));
         }
         adapter.setList(list);
